package PaintBasico;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;

/**
 *
 * @author Francisco Beltrán Sánchez
 */
public class Lienzo extends javax.swing.JPanel {
    
    //Atributos de la clase 
    
    private Point pinicial=new Point(-10,-10);
    private Point pfinal=new Point(-10,-10);
    private Color color=Color.BLACK;
    private boolean relleno=false;
    private Herramientas herramienta=Herramientas.Punto;

    //Getters y setters de los atributos de la clase
    
    public void setColor(Color color) {
        this.color = color;
    }

    public Color getColor() {
        return color;
    }
    
    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
    }

    public boolean isRelleno() {
        return relleno;
    }
    
    public void setHerramienta(Herramientas herramienta) {
        this.herramienta = herramienta;
    }

    public Herramientas getHerramienta() {
        return herramienta;
    }

    public void setPinicial(Point pinicial) {
        this.pinicial = pinicial;
    }

    public Point getPinicial() {
        return pinicial;
    }

    public void setPfinal(Point pfinal) {
        this.pfinal = pfinal;
    }
    
    public Point getPfinal() {
        return pfinal;
    }
    
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    /**
     * En esta funcion y la siguiente igualamos pfinal a pinicial ya que, al ser
     * estos los dos eventos que provocan el dibujado de una nueva figura, 
     * necesitamos reinciar el valor de los atributos que definen la geometría 
     * de la nueva forma. 
     * 
     * Para pinicial vemos cual ha sido el punto donde se ha generado el evento
     * (click o presión), y este valor se lo establecemos a pfinal, ya que en un
     * primer instante el punto inicial y el final deben ser iguales hasta que 
     * generemos un evento que actualice el valor del atributo pfinal (eventos 
     * mouseDragged y mouseReleased).
     * 
     * Cuando estén todos los atributos actualizados tras el evento, llamamos al
     * método paint(), el cual dibujará los cambios en el lienzo.
     */
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        pinicial=evt.getPoint();
        pfinal=pinicial;
        this.repaint();
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        pinicial=evt.getPoint();   
        pfinal=pinicial;
        this.repaint();     
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        pfinal=evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        pfinal=evt.getPoint();
        this.repaint();
    }//GEN-LAST:event_formMouseReleased

    @Override
    public void paint(Graphics g){
        super.paint(g);
        
        g.setColor(color);
        
        /**
         * El atributo herramienta definirá que figura se pintará, decidiendo que
         * método del objeto Graphics g se ejecutará.
         */
        switch(herramienta){
            case Punto:
                g.fillOval(pinicial.x, pinicial.y, 10, 10);
            break;
            
            case Linea:
                g.drawLine(pinicial.x, pinicial.y, pfinal.x, pfinal.y);
            break;
            
            case Cuadrado:
                /**
                 * El atributo relleno decidirá si se ejecuta el método de dibujo con
                 * relleno de la figura correspondiente o no.
                 */
                if(relleno){
                    g.fillRect(Math.min(pinicial.x, pfinal.x), Math.min(pinicial.y, pfinal.y), Math.abs(pfinal.x-pinicial.x), Math.abs(pfinal.y-pinicial.y));
                }
                else{
                    g.drawRect(Math.min(pinicial.x, pfinal.x), Math.min(pinicial.y, pfinal.y), Math.abs(pfinal.x-pinicial.x), Math.abs(pfinal.y-pinicial.y));
                }
            break;
            
            case Ovalo:
                if(relleno){
                    g.fillOval(Math.min(pinicial.x, pfinal.x), Math.min(pinicial.y, pfinal.y), Math.abs(pfinal.x-pinicial.x), Math.abs(pfinal.y-pinicial.y));
                }
                else{
                    g.drawOval(Math.min(pinicial.x, pfinal.x), Math.min(pinicial.y, pfinal.y), Math.abs(pfinal.x-pinicial.x), Math.abs(pfinal.y-pinicial.y));
                }
            break;
        }   
         
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
