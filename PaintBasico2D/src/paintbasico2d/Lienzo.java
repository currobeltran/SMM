package paintbasico2d;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.util.ArrayList;

/**
 *
 * @author Francisco Beltrán Sánchez
 */
public class Lienzo extends javax.swing.JPanel {
    
    //Atributos de la clase
    private Herramientas herramienta=Herramientas.Punto;
    private ArrayList<Shape> formas=new ArrayList();
    private Point2D p1;
    private BasicStroke grosor=new BasicStroke(1);
    private Paint color=Color.BLACK;
    private boolean relleno=false;
    private boolean editar=false;
    private Shape formaSeleccionada=null;

    //Getters y setters de los atributos de la clase
    
    public void setHerramienta(Herramientas herramienta) {
        this.herramienta = herramienta;
    }

    public Herramientas getHerramienta() {
        return herramienta;
    }

    public void setGrosor(BasicStroke grosor) {
        this.grosor = grosor;
        this.repaint();
    }

    public void setColor(Paint color) {
        this.color = color;
        this.repaint();
    }

    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
        this.repaint();
    }

    public boolean isRelleno() {
        return relleno;
    }

    public void setEditar(boolean editar) {
        this.editar = editar;
    }
    
    public boolean isEditar(){
        return editar;
    }
    
    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        createShape(evt);
        this.repaint();    
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        updateShape(evt);
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        updateShape(evt);
        this.repaint();
    }//GEN-LAST:event_formMouseReleased

    private void createShape(java.awt.event.MouseEvent evt){
        p1=evt.getPoint();
        
        if(!editar)
            switch(herramienta){
                case Punto:
                    formas.add(new MiLinea2D(evt.getPoint(), evt.getPoint()));
                break;

                case Linea:
                    formas.add(new MiLinea2D(evt.getPoint(), evt.getPoint()));
                break;

                case Cuadrado:
                    formas.add(new Rectangle(evt.getX(), evt.getY(), 0, 0));
                break;

                case Ovalo:
                    formas.add(new MiElipse2D(evt.getPoint(), 0, 0));
                break;
            }
        
        else{
            formaSeleccionada=setSelectedShape(evt.getPoint());
        }
    }
    
    private void updateShape(java.awt.event.MouseEvent evt){
        Shape s;
        
        if(editar){
            if(formaSeleccionada!=null)
                setLocation(formaSeleccionada, evt.getPoint());
        }
        
        else{
            s=formas.get(formas.size()-1);
        
            if(s instanceof MiLinea2D){
                ((MiLinea2D)s).setLine(p1,evt.getPoint());
            }     

            else if(s instanceof Rectangle){
                ((Rectangle)s).setFrameFromDiagonal(p1,evt.getPoint());
            }

            else if(s instanceof MiElipse2D){
                ((MiElipse2D)s).setFrameFromDiagonal(p1, evt.getPoint());
            }
        }
    }
    
    private Shape setSelectedShape(Point2D p){
        for (Shape s : formas){
            if(s.contains(p)){
                return s;
            }
        }
        return null;
    }
    
    private void setLocation(Shape s, Point2D pos){
        if(s instanceof MiLinea2D){
            ((MiLinea2D)s).setLocation(pos);
        }
        else if(s instanceof Rectangle){
            ((Rectangle)s).setLocation((Point)pos);
        }
        else if(s instanceof MiElipse2D){
            ((MiElipse2D)s).setLocation(pos);
        }
    }
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        
        Graphics2D g2d=(Graphics2D)g; 
        
        g2d.setPaint(color);
        
        g2d.setStroke(grosor);
         
        for(Shape s : formas){
            if(!relleno)
                g2d.draw(s);
            else
                g2d.fill(s);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
