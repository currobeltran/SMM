package practica8;

import Paint2D.Herramientas;
import Paint2D.MiCellRenderer;
import java.awt.Color;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

/**
 *
 * @author Francisco Beltrán Sánchez
 */
public class MarcoPrincipal extends javax.swing.JFrame {

    /**
     * Atributos de la ventana principal
     */
    private MarcoSecundario ventanaActiva;
    private ArrayList<MarcoSecundario> lienzos=new ArrayList();
    
    private MiManejador manejador=new MiManejador();
    
    /**
     * Creates new form MarcoPrincipal
     */
   
    public MarcoPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barraSuperior = new javax.swing.JPanel();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        modoPunto = new javax.swing.JToggleButton();
        modoLinea = new javax.swing.JToggleButton();
        modoRectangulo = new javax.swing.JToggleButton();
        modoElipse = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JSeparator();
        seleccionColores = new javax.swing.JComboBox<Color>();
        jSeparator3 = new javax.swing.JSeparator();
        selectorGrosor = new javax.swing.JSpinner();
        modoEditar = new javax.swing.JToggleButton();
        modoRelleno = new javax.swing.JToggleButton();
        modoTransparencia = new javax.swing.JToggleButton();
        modoAlisar = new javax.swing.JToggleButton();
        barraInferior = new javax.swing.JPanel();
        barraEstado = new javax.swing.JLabel();
        escritorio = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        opcionNuevo = new javax.swing.JMenuItem();
        opcionAbrir = new javax.swing.JMenuItem();
        opcionGuardar = new javax.swing.JMenuItem();
        menuEdicion = new javax.swing.JMenu();
        visibilidadBarraEstado = new javax.swing.JMenuItem();
        visibilidadBarraFormas = new javax.swing.JMenuItem();
        visibilidadBarraAtributos = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraSuperior.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/nuevo.png"))); // NOI18N
        botonNuevo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        barraSuperior.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/abrir.png"))); // NOI18N
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        barraSuperior.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/guardar.png"))); // NOI18N
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        barraSuperior.add(botonGuardar);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 50));
        barraSuperior.add(jSeparator1);

        modoPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/punto.png"))); // NOI18N
        modoPunto.setFocusable(false);
        modoPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoPuntoActionPerformed(evt);
            }
        });
        barraSuperior.add(modoPunto);

        modoLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/linea.png"))); // NOI18N
        modoLinea.setFocusable(false);
        modoLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoLineaActionPerformed(evt);
            }
        });
        barraSuperior.add(modoLinea);

        modoRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/rectangulo.png"))); // NOI18N
        modoRectangulo.setFocusable(false);
        modoRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoRectanguloActionPerformed(evt);
            }
        });
        barraSuperior.add(modoRectangulo);

        modoElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/elipse.png"))); // NOI18N
        modoElipse.setFocusable(false);
        modoElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoElipseActionPerformed(evt);
            }
        });
        barraSuperior.add(modoElipse);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(2, 50));
        barraSuperior.add(jSeparator2);

        seleccionColores.setRenderer(new MiCellRenderer());
        seleccionColores.setModel(new javax.swing.DefaultComboBoxModel(new Color[] { Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN }));
        seleccionColores.setPreferredSize(new java.awt.Dimension(60, 40));
        seleccionColores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                seleccionColoresItemStateChanged(evt);
            }
        });
        barraSuperior.add(seleccionColores);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(2, 50));
        barraSuperior.add(jSeparator3);

        selectorGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectorGrosorStateChanged(evt);
            }
        });
        barraSuperior.add(selectorGrosor);

        modoEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/seleccion.png"))); // NOI18N
        modoEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoEditarActionPerformed(evt);
            }
        });
        barraSuperior.add(modoEditar);

        modoRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/rellenar.png"))); // NOI18N
        modoRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoRellenoActionPerformed(evt);
            }
        });
        barraSuperior.add(modoRelleno);

        modoTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/transparencia.png"))); // NOI18N
        modoTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoTransparenciaActionPerformed(evt);
            }
        });
        barraSuperior.add(modoTransparencia);

        modoAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/alisar.png"))); // NOI18N
        modoAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoAlisarActionPerformed(evt);
            }
        });
        barraSuperior.add(modoAlisar);

        getContentPane().add(barraSuperior, java.awt.BorderLayout.PAGE_START);

        barraInferior.setLayout(new java.awt.BorderLayout());

        barraEstado.setText("Hola");
        barraEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        barraInferior.add(barraEstado, java.awt.BorderLayout.SOUTH);

        getContentPane().add(barraInferior, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        opcionNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/nuevo.png"))); // NOI18N
        opcionNuevo.setText("Nuevo");
        opcionNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionNuevo);

        opcionAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/abrir.png"))); // NOI18N
        opcionAbrir.setText("Abrir");
        opcionAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionAbrir);

        opcionGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/guardar.png"))); // NOI18N
        opcionGuardar.setText("Guardar");
        opcionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionGuardar);

        barraMenu.add(menuArchivo);

        menuEdicion.setText("Edición");

        visibilidadBarraEstado.setText("Ver barra de estado");
        visibilidadBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadBarraEstadoActionPerformed(evt);
            }
        });
        menuEdicion.add(visibilidadBarraEstado);

        visibilidadBarraFormas.setText("Ver barra de formas");
        visibilidadBarraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadBarraFormasActionPerformed(evt);
            }
        });
        menuEdicion.add(visibilidadBarraFormas);

        visibilidadBarraAtributos.setText("Ver barra de atributos");
        visibilidadBarraAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadBarraAtributosActionPerformed(evt);
            }
        });
        menuEdicion.add(visibilidadBarraAtributos);

        barraMenu.add(menuEdicion);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Se crea un nuevo MarcoSecundario, se añade a un vector donde se 
     * almacenarán todas las ventanas internas generadas y se establece el 
     * estado de los botones del MarcoPrimario respecto a las propiedades de 
     * inicio del lienzo.
     * 
     * Además, se añade al MarcoSecundario un manejador de eventos, el cual 
     * viene explicado en el lugar donde se define su clase.
     */
    private void opcionNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionNuevoActionPerformed
        lienzos.add(new MarcoSecundario());
        escritorio.add(lienzos.get(lienzos.size()-1));
        lienzos.get(lienzos.size()-1).setVisible(true);
        
        ventanaActiva=lienzos.get(lienzos.size()-1);
        ventanaActiva.addInternalFrameListener(manejador);
        
        cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        
        cambiarEstadoPropiedades(ventanaActiva.getLienzo().isEditar(),
                                 ventanaActiva.getLienzo().isAlisado(),
                                 ventanaActiva.getLienzo().isTransparencia(),
                                 ventanaActiva.getLienzo().isRelleno());

        seleccionarColor((Color)ventanaActiva.getLienzo().getColor());
        
        cambiarValorGrosor(ventanaActiva.getLienzo().getGrosor());
    }//GEN-LAST:event_opcionNuevoActionPerformed

    /**
     * Acciones realizadas al seleccionar en la barra de herramientas el modo
     * punto. Primero se cambia en el objeto lienzo de la ventanaActiva
     * el atributo herramienta, y después se cambia el estado de la sección de 
     * herramientas del MarcoPrincipal para que concuerde con el elemento 
     * seleccionado.
     *
     * @param evt 
     */
    private void modoPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoPuntoActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setHerramienta(Herramientas.Punto);
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        } 
    }//GEN-LAST:event_modoPuntoActionPerformed

    /**
     * Acciones realizadas al seleccionar en la barra de herramientas el modo
     * línea. Primero se cambia en el objeto lienzo de la ventanaActiva
     * el atributo herramienta, y después se cambia el estado de la sección de 
     * herramientas del MarcoPrincipal para que concuerde con el elemento 
     * seleccionado.
     * 
     * @param evt 
     */
    private void modoLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoLineaActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setHerramienta(Herramientas.Linea);
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        }
    }//GEN-LAST:event_modoLineaActionPerformed

    /**
     * Acciones realizadas al seleccionar en la barra de herramientas el modo
     * rectángulo. Primero se cambia en el objeto lienzo de la ventanaActiva
     * el atributo herramienta, y después se cambia el estado de la sección de 
     * herramientas del MarcoPrincipal para que concuerde con el elemento 
     * seleccionado.
     * 
     * @param evt 
     */
    private void modoRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoRectanguloActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setHerramienta(Herramientas.Cuadrado);
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        }
    }//GEN-LAST:event_modoRectanguloActionPerformed

    /**
     * Acciones realizadas al seleccionar en la barra de herramientas el modo
     * elipse/óvalo. Primero se cambia en el objeto lienzo de la ventanaActiva
     * el atributo herramienta, y después se cambia el estado de la sección de 
     * herramientas del MarcoPrincipal para que concuerde con el elemento 
     * seleccionado.
     * 
     * @param evt 
     */
    private void modoElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoElipseActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setHerramienta(Herramientas.Ovalo);
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        }
    }//GEN-LAST:event_modoElipseActionPerformed

    /**
     * Accion realizada al seleccionar en el menu de edición la visibilidad de 
     * la barra de estado.
     * 
     * @param evt 
     */
    private void visibilidadBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadBarraEstadoActionPerformed
        barraEstado.setVisible(!barraEstado.isVisible());
    }//GEN-LAST:event_visibilidadBarraEstadoActionPerformed

    /**
     * Accion realizada al seleccionar en el menu de archivo la opción abrir. No
     * se abre ningún archivo ya que no tendría sentido en el programa, solo se 
     * abre la ventana de diálogo correspondiente.
     * 
     * @param evt 
     */
    private void opcionAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAbrirActionPerformed
        JFileChooser dlg=new JFileChooser();
        int resp=dlg.showOpenDialog(this);
        if(resp==JFileChooser.APPROVE_OPTION){
            File f =dlg.getSelectedFile();
        }
    }//GEN-LAST:event_opcionAbrirActionPerformed

    /**
     * Accion realizada al seleccionar en el menu de archivo la opción guardar. No
     * se guarda ningún archivo ya que no tendría sentido en el programa, solo se 
     * abre la ventana de diálogo correspondiente.
     * 
     * @param evt 
     */
    private void opcionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarActionPerformed
        JFileChooser dlg=new JFileChooser();
        int resp=dlg.showSaveDialog(this);
        if(resp==JFileChooser.APPROVE_OPTION){
            File f =dlg.getSelectedFile();
        }
    }//GEN-LAST:event_opcionGuardarActionPerformed

    /**
     * Método para recoger el valor del selector de grosor tras realizarse un 
     * cambio sobre el; y enviarlo a la ventana interna activa en ese momento.
     * @param evt 
     */
    private void selectorGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectorGrosorStateChanged
        if(ventanaActiva!=null)
            ventanaActiva.getLienzo().setGrosor((int)selectorGrosor.getValue());
    }//GEN-LAST:event_selectorGrosorStateChanged

    /**
     * Método para ocultar los botones de selección de formas.
     * @param evt 
     */
    private void visibilidadBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadBarraFormasActionPerformed
        modoPunto.setVisible(!modoPunto.isVisible());
        modoLinea.setVisible(!modoLinea.isVisible());
        modoRectangulo.setVisible(!modoRectangulo.isVisible());
        modoElipse.setVisible(!modoElipse.isVisible());
    }//GEN-LAST:event_visibilidadBarraFormasActionPerformed

    /**
     * Método para ocultar los botones de selección de atributos.
     * @param evt 
     */
    private void visibilidadBarraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadBarraAtributosActionPerformed
        modoEditar.setVisible(!modoEditar.isVisible());
        modoAlisar.setVisible(!modoAlisar.isVisible());
        modoRelleno.setVisible(!modoRelleno.isVisible());
        modoTransparencia.setVisible(!modoTransparencia.isVisible());
    }//GEN-LAST:event_visibilidadBarraAtributosActionPerformed

    /**
     * Método que establece al lienzo el atributo color, seleccionado en el menú
     * desplegable.
     * @param evt 
     */
    private void seleccionColoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_seleccionColoresItemStateChanged
        if(ventanaActiva!=null)
            ventanaActiva.getLienzo().setColor((Color)evt.getItem());
    }//GEN-LAST:event_seleccionColoresItemStateChanged

    /**
     * Método que establece las acciones a realizar cuando se actua sobre el 
     * botón correspondiente al modo editar
     * @param evt 
     */
    private void modoEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoEditarActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setEditar(!ventanaActiva.getLienzo().isEditar());
            if(ventanaActiva.getLienzo().isEditar())
                barraEstado.setText("Modo editar activado");
            else
                barraEstado.setText("Modo editar desactivado");
        }
    }//GEN-LAST:event_modoEditarActionPerformed

    /**
     * Método que establece las acciones a realizar cuando se actua sobre el 
     * botón correspondiente al modo relleno
     * @param evt 
     */
    private void modoRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoRellenoActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setRelleno(!ventanaActiva.getLienzo().isRelleno());
            if(ventanaActiva.getLienzo().isRelleno())
                barraEstado.setText("Relleno activado");
            else
                barraEstado.setText("Relleno desactivado");
        }
    }//GEN-LAST:event_modoRellenoActionPerformed

    /**
     * Método que establece las acciones a realizar cuando se actua sobre el 
     * botón correspondiente al modo transparencia
     * @param evt 
     */
    private void modoTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoTransparenciaActionPerformed
        
        
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setTransparencia(!ventanaActiva.getLienzo().isTransparencia());
            if(ventanaActiva.getLienzo().isTransparencia())
                barraEstado.setText("Modo transparencia activado");
            else
                barraEstado.setText("Modo transparencia desactivado");
        }
    }//GEN-LAST:event_modoTransparenciaActionPerformed

    /**
     * Método que establece las acciones a realizar cuando se actua sobre el 
     * botón correspondiente al modo alisar
     * @param evt 
     */
    private void modoAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoAlisarActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setAlisado(!ventanaActiva.getLienzo().isAlisado());
            if(ventanaActiva.getLienzo().isAlisado())
                barraEstado.setText("Modo alisado activado");
            else
                barraEstado.setText("Modo alisado desactivado");
        }
    }//GEN-LAST:event_modoAlisarActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        opcionNuevoActionPerformed(evt);
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        opcionAbrirActionPerformed(evt);
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        opcionGuardarActionPerformed(evt);
    }//GEN-LAST:event_botonGuardarActionPerformed
    
    /**
     * Clase manejadora de eventos del lienzo en MarcoPrincipal. Con este 
     * manejador, controlaremos cual es la ventana interna activa en cada 
     * momento de la ejecución, estableciendo los cambios necesarios cuando la
     * ventana interna activada pase a ser otra distinta.
     */
    public class MiManejador extends InternalFrameAdapter{
        
        @Override
        public void internalFrameActivated(InternalFrameEvent evt){
            ventanaActiva=(MarcoSecundario)evt.getInternalFrame();
            
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
            
            cambiarEstadoPropiedades(ventanaActiva.getLienzo().isEditar(),
                                     ventanaActiva.getLienzo().isAlisado(),
                                     ventanaActiva.getLienzo().isTransparencia(),
                                     ventanaActiva.getLienzo().isRelleno());
            
            seleccionarColor((Color)ventanaActiva.getLienzo().getColor());
            
            cambiarValorGrosor(ventanaActiva.getLienzo().getGrosor());
        }
    }
    
    /**
     * Método para cambiar el estado de los botones correspondientes a
     * una herramienta. Además, mostrará un mensaje en la barra de estado 
     * notificando dicho cambio.
     * @param h. Herramienta la cual queremos que su botón correspondiente sea
     * seleccionado.
     */
    
    public void cambiarEstadoHerramientas(Herramientas h){
        switch(h){
            case Punto:
                modoLinea.setSelected(false);
                modoRectangulo.setSelected(false);
                modoElipse.setSelected(false);
                modoPunto.setSelected(true);

                barraEstado.setText("Modo punto");
            break;

            case Linea:

                modoPunto.setSelected(false);
                modoRectangulo.setSelected(false);
                modoElipse.setSelected(false);
                modoLinea.setSelected(true);

                barraEstado.setText("Modo línea");

            break;

            case Cuadrado:

                modoPunto.setSelected(false);
                modoLinea.setSelected(false);
                modoElipse.setSelected(false);
                modoRectangulo.setSelected(true);

                barraEstado.setText("Modo rectángulo");

            break;

            case Ovalo:
                modoPunto.setSelected(false);
                modoLinea.setSelected(false);
                modoRectangulo.setSelected(false);
                modoElipse.setSelected(true);

                barraEstado.setText("Modo elipse");
            break;
        }
    }
    
    /**
     * Método para establecer el estado de los botones correspondientes a las 
     * propiedades de las figuras dibujadas en un lienzo.
     * @param e. Modo Editar activado/desactivado.
     * @param a. Modo Alisar activado/desactivado.
     * @param t. Modo Transparencia activado/desactivado.
     * @param r. Modo Relleno activado/desactivado. 
     */
    public void cambiarEstadoPropiedades(boolean e, boolean a, boolean t, boolean r){
        modoRelleno.setSelected(r);
        modoAlisar.setSelected(a);
        modoTransparencia.setSelected(t);
        modoEditar.setSelected(e);
        
    }

    /**
     * Método para establecer, dentro del combobox de selección de color, una de
     * las opciones dentro de esta.
     * @param c. Color a seleccionar en la lista de colores.
     */
    public void seleccionarColor(Color c){
        seleccionColores.setSelectedItem((Color)c);
    }
    
    /**
     * Método para establecer en el selector de grosor, un valor i enviado como
     * parámetro.
     * @param i. Valor de grosor a establecer.
     */
    public void cambiarValorGrosor(int i){
        selectorGrosor.setValue(i);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel barraEstado;
    private javax.swing.JPanel barraInferior;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JPanel barraSuperior;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEdicion;
    private javax.swing.JToggleButton modoAlisar;
    private javax.swing.JToggleButton modoEditar;
    private javax.swing.JToggleButton modoElipse;
    private javax.swing.JToggleButton modoLinea;
    private javax.swing.JToggleButton modoPunto;
    private javax.swing.JToggleButton modoRectangulo;
    private javax.swing.JToggleButton modoRelleno;
    private javax.swing.JToggleButton modoTransparencia;
    private javax.swing.JMenuItem opcionAbrir;
    private javax.swing.JMenuItem opcionGuardar;
    private javax.swing.JMenuItem opcionNuevo;
    private javax.swing.JComboBox<Color> seleccionColores;
    private javax.swing.JSpinner selectorGrosor;
    private javax.swing.JMenuItem visibilidadBarraAtributos;
    private javax.swing.JMenuItem visibilidadBarraEstado;
    private javax.swing.JMenuItem visibilidadBarraFormas;
    // End of variables declaration//GEN-END:variables
}
