package practica14;

import Paint2D.CellRendererColorSpace;
import Paint2D.CellRendererFiltros;
import Paint2D.Herramientas;
import Paint2D.LienzoEvent;
import Paint2D.LienzoListener;
import Paint2D.MiBufferedImage;
import Paint2D.MiCellRenderer;
import Paint2D.MiDialogo;
import Paint2D.MisFiltros;
import image.PosterizarOp;
import image.RedOp;
import java.awt.Color;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BandCombineOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.*;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.color.GreyColorSpace;
import sm.sound.SMClipPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;
import uk.co.caprica.vlcj.player.MediaPlayer;
import uk.co.caprica.vlcj.player.MediaPlayerEventAdapter;

/**
 *
 * @author Francisco Beltrán Sánchez
 */
public class MarcoPrincipal extends javax.swing.JFrame {

    /**
     * Atributos de la ventana principal
     */
    private MarcoSecundario ventanaActiva;
    private ArrayList<MarcoSecundario> lienzos=new ArrayList();
    private SMClipPlayer player=null;
    private SMRecorder recorder=null;
        
    private MiManejador manejador=new MiManejador();
    private LienzoAdapter manejadorLienzo=new LienzoAdapter();
    private BufferedImage imagenAux=null;
    
    /**
     * Creates new form MarcoPrincipal
     */
   
    public MarcoPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barraSuperior = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        herramientasGraficos = new javax.swing.JToolBar();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        botonNuevo = new javax.swing.JButton();
        botonAbrir = new javax.swing.JButton();
        botonGuardar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        modoPunto = new javax.swing.JToggleButton();
        modoLinea = new javax.swing.JToggleButton();
        modoRectangulo = new javax.swing.JToggleButton();
        modoElipse = new javax.swing.JToggleButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        seleccionColores = new javax.swing.JComboBox<Color>();
        sacarDialogoColor = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        activarColorRelleno = new javax.swing.JToggleButton();
        activarColorTrazo = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        selectorGrosor = new javax.swing.JSpinner();
        discontinuidadActivada = new javax.swing.JToggleButton();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        modoEditar = new javax.swing.JToggleButton();
        jSeparator14 = new javax.swing.JToolBar.Separator();
        modoRelleno = new javax.swing.JToggleButton();
        modoLisoRelleno = new javax.swing.JToggleButton();
        modoDegradadoRelleno = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        seleccionColores1 = new javax.swing.JComboBox<Color>();
        seleccionColores2 = new javax.swing.JComboBox<Color>();
        degradadoVertical = new javax.swing.JRadioButton();
        degradadoHorizontal = new javax.swing.JRadioButton();
        jSeparator13 = new javax.swing.JToolBar.Separator();
        modoTransparencia = new javax.swing.JToggleButton();
        jSlider1 = new javax.swing.JSlider();
        jSeparator15 = new javax.swing.JToolBar.Separator();
        modoAlisar = new javax.swing.JToggleButton();
        herramientasImagen = new javax.swing.JToolBar();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        botonNegativo = new javax.swing.JButton();
        duplicado = new javax.swing.JButton();
        panelFiltro = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        comboFiltro = new javax.swing.JComboBox();
        panelCuadratico = new javax.swing.JPanel();
        botonCuadratica = new javax.swing.JButton();
        sliderM = new javax.swing.JSlider();
        botonCombinar = new javax.swing.JButton();
        herramientaSonido = new javax.swing.JToolBar();
        botonReproducirAudio = new javax.swing.JButton();
        botonDetenerAudio = new javax.swing.JButton();
        listaReproduccionAudio = new javax.swing.JComboBox<File>();
        botonGrabarAudio = new javax.swing.JButton();
        tiempoAudio = new javax.swing.JLabel();
        herramientasVideo = new javax.swing.JToolBar();
        reproducirVideo = new javax.swing.JButton();
        pararVideo = new javax.swing.JButton();
        webcam = new javax.swing.JButton();
        capturas = new javax.swing.JButton();
        barraInferior = new javax.swing.JPanel();
        barraEstado = new javax.swing.JLabel();
        herramientasImagen2 = new javax.swing.JToolBar();
        panelBrillo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        sliderBrillo = new javax.swing.JSlider();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        panelContraste = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        botonesContraste = new javax.swing.JPanel();
        botonContraste = new javax.swing.JButton();
        botonContrasteIluminado = new javax.swing.JButton();
        botonContrasteOscurecido = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        panelRotacion = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        rotacion90 = new javax.swing.JButton();
        rotacion180 = new javax.swing.JButton();
        rotacion270 = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        panelEscala = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        aumentarEscala = new javax.swing.JButton();
        disminuirEscala = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        panelColor = new javax.swing.JPanel();
        labelColor = new javax.swing.JLabel();
        botonesColor = new javax.swing.JPanel();
        botonColor = new javax.swing.JButton();
        comboBoxEspaciosColor = new javax.swing.JComboBox();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        panelOtros = new javax.swing.JPanel();
        botonTintado = new javax.swing.JButton();
        botonSepia = new javax.swing.JButton();
        botonEqualizar = new javax.swing.JButton();
        botonFiltroRojo = new javax.swing.JButton();
        sliderPosterizar = new javax.swing.JSlider();
        escritorio = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        opcionNuevo = new javax.swing.JMenuItem();
        opcionAbrir = new javax.swing.JMenuItem();
        opcionGuardar = new javax.swing.JMenuItem();
        menuEdicion = new javax.swing.JMenu();
        visibilidadGraficos = new javax.swing.JMenuItem();
        visibilidadImagen = new javax.swing.JMenuItem();
        visibilidadSonido = new javax.swing.JMenuItem();
        visibilidadVideo = new javax.swing.JMenuItem();
        visibilidadBarraEstado = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraSuperior.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        herramientasGraficos.setRollover(true);
        herramientasGraficos.add(jSeparator1);

        botonNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/nuevo.png"))); // NOI18N
        botonNuevo.setToolTipText("Nuevo");
        botonNuevo.setFocusable(false);
        botonNuevo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        botonNuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNuevoActionPerformed(evt);
            }
        });
        herramientasGraficos.add(botonNuevo);

        botonAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/abrir.png"))); // NOI18N
        botonAbrir.setToolTipText("Abrir");
        botonAbrir.setFocusable(false);
        botonAbrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbrirActionPerformed(evt);
            }
        });
        herramientasGraficos.add(botonAbrir);

        botonGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/guardar.png"))); // NOI18N
        botonGuardar.setToolTipText("Guardar");
        botonGuardar.setFocusable(false);
        botonGuardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGuardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGuardarActionPerformed(evt);
            }
        });
        herramientasGraficos.add(botonGuardar);
        herramientasGraficos.add(jSeparator2);

        modoPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/punto.png"))); // NOI18N
        modoPunto.setFocusable(false);
        modoPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoPunto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoPuntoActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoPunto);

        modoLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/linea.png"))); // NOI18N
        modoLinea.setFocusable(false);
        modoLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoLineaActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoLinea);

        modoRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/rectangulo.png"))); // NOI18N
        modoRectangulo.setFocusable(false);
        modoRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoRectanguloActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoRectangulo);

        modoElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/elipse.png"))); // NOI18N
        modoElipse.setFocusable(false);
        modoElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoElipseActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoElipse);
        herramientasGraficos.add(jSeparator7);

        seleccionColores.setRenderer(new MiCellRenderer());
        seleccionColores.setModel(new javax.swing.DefaultComboBoxModel(new Color[] { Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN }));
        seleccionColores.setPreferredSize(new java.awt.Dimension(60, 40));
        seleccionColores.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                seleccionColoresItemStateChanged(evt);
            }
        });
        herramientasGraficos.add(seleccionColores);

        sacarDialogoColor.setText("Otro color");
        sacarDialogoColor.setFocusable(false);
        sacarDialogoColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sacarDialogoColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        sacarDialogoColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sacarDialogoColorActionPerformed(evt);
            }
        });
        herramientasGraficos.add(sacarDialogoColor);
        herramientasGraficos.add(jSeparator11);

        activarColorRelleno.setText("Relleno");
        activarColorRelleno.setFocusable(false);
        activarColorRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        activarColorRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        activarColorRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activarColorRellenoActionPerformed(evt);
            }
        });
        herramientasGraficos.add(activarColorRelleno);

        activarColorTrazo.setSelected(true);
        activarColorTrazo.setText("Trazo");
        activarColorTrazo.setFocusable(false);
        activarColorTrazo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        activarColorTrazo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        activarColorTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activarColorTrazoActionPerformed(evt);
            }
        });
        herramientasGraficos.add(activarColorTrazo);
        herramientasGraficos.add(jSeparator5);

        selectorGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                selectorGrosorStateChanged(evt);
            }
        });
        herramientasGraficos.add(selectorGrosor);

        discontinuidadActivada.setText("Discontinuidad");
        discontinuidadActivada.setFocusable(false);
        discontinuidadActivada.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        discontinuidadActivada.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        discontinuidadActivada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discontinuidadActivadaActionPerformed(evt);
            }
        });
        herramientasGraficos.add(discontinuidadActivada);
        herramientasGraficos.add(jSeparator12);

        modoEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/seleccion.png"))); // NOI18N
        modoEditar.setFocusable(false);
        modoEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoEditarActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoEditar);
        herramientasGraficos.add(jSeparator14);

        modoRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/rellenar.png"))); // NOI18N
        modoRelleno.setFocusable(false);
        modoRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoRellenoActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoRelleno);

        modoLisoRelleno.setSelected(true);
        modoLisoRelleno.setText("Liso");
        modoLisoRelleno.setFocusable(false);
        modoLisoRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoLisoRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoLisoRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoLisoRellenoActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoLisoRelleno);

        modoDegradadoRelleno.setText("Degradado");
        modoDegradadoRelleno.setFocusable(false);
        modoDegradadoRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoDegradadoRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoDegradadoRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoDegradadoRellenoActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoDegradadoRelleno);

        seleccionColores1.setRenderer(new MiCellRenderer());
        seleccionColores1.setModel(new javax.swing.DefaultComboBoxModel(new Color[] { Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN }));
        seleccionColores1.setPreferredSize(new java.awt.Dimension(60, 40));
        seleccionColores1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                seleccionColores1ItemStateChanged(evt);
            }
        });
        jPanel3.add(seleccionColores1);

        seleccionColores2.setRenderer(new MiCellRenderer());
        seleccionColores2.setModel(new javax.swing.DefaultComboBoxModel(new Color[] { Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN }));
        seleccionColores2.setPreferredSize(new java.awt.Dimension(60, 40));
        seleccionColores2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                seleccionColores2ItemStateChanged(evt);
            }
        });
        jPanel3.add(seleccionColores2);

        degradadoVertical.setSelected(true);
        degradadoVertical.setText("Vertical");
        degradadoVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degradadoVerticalActionPerformed(evt);
            }
        });
        jPanel3.add(degradadoVertical);

        degradadoHorizontal.setText("Horizontal");
        degradadoHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degradadoHorizontalActionPerformed(evt);
            }
        });
        jPanel3.add(degradadoHorizontal);

        herramientasGraficos.add(jPanel3);
        herramientasGraficos.add(jSeparator13);

        modoTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/transparencia.png"))); // NOI18N
        modoTransparencia.setFocusable(false);
        modoTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoTransparenciaActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoTransparencia);
        herramientasGraficos.add(jSlider1);
        herramientasGraficos.add(jSeparator15);

        modoAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/alisar.png"))); // NOI18N
        modoAlisar.setFocusable(false);
        modoAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        modoAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        modoAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modoAlisarActionPerformed(evt);
            }
        });
        herramientasGraficos.add(modoAlisar);

        jTabbedPane1.addTab("Graficos", herramientasGraficos);

        herramientasImagen.setRollover(true);
        herramientasImagen.add(jSeparator3);

        botonNegativo.setText("Negativo");
        botonNegativo.setFocusable(false);
        botonNegativo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNegativo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegativoActionPerformed(evt);
            }
        });
        herramientasImagen.add(botonNegativo);

        duplicado.setText("Duplicado");
        duplicado.setFocusable(false);
        duplicado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        duplicado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        duplicado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicadoActionPerformed(evt);
            }
        });
        herramientasImagen.add(duplicado);

        panelFiltro.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelFiltro.setLayout(new java.awt.BorderLayout());

        jLabel2.setText("Filtro");
        panelFiltro.add(jLabel2, java.awt.BorderLayout.NORTH);

        comboFiltro.setRenderer(new CellRendererFiltros());
        comboFiltro.setModel(new javax.swing.DefaultComboBoxModel(new Integer[] { KernelProducer.TYPE_MEDIA_3x3, KernelProducer.TYPE_BINOMIAL_3x3, KernelProducer.TYPE_ENFOQUE_3x3, KernelProducer.TYPE_RELIEVE_3x3, KernelProducer.TYPE_LAPLACIANA_3x3, 6, 7}));
        comboFiltro.setPreferredSize(new java.awt.Dimension(80, 50));
        comboFiltro.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboFiltroItemStateChanged(evt);
            }
        });
        panelFiltro.add(comboFiltro, java.awt.BorderLayout.CENTER);

        herramientasImagen.add(panelFiltro);

        panelCuadratico.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        botonCuadratica.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/cuadratica.png"))); // NOI18N
        botonCuadratica.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        botonCuadratica.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCuadratica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCuadraticaActionPerformed(evt);
            }
        });
        panelCuadratico.add(botonCuadratica);

        sliderM.setMaximum(255);
        sliderM.setValue(128);
        sliderM.setPreferredSize(new java.awt.Dimension(100, 16));
        sliderM.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMStateChanged(evt);
            }
        });
        sliderM.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderMFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderMFocusLost(evt);
            }
        });
        panelCuadratico.add(sliderM);

        botonCombinar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/combinar.png"))); // NOI18N
        botonCombinar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCombinarActionPerformed(evt);
            }
        });
        panelCuadratico.add(botonCombinar);

        herramientasImagen.add(panelCuadratico);

        jTabbedPane1.addTab("Imagen", herramientasImagen);

        herramientaSonido.setRollover(true);

        botonReproducirAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/play24x24.png"))); // NOI18N
        botonReproducirAudio.setFocusable(false);
        botonReproducirAudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonReproducirAudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonReproducirAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonReproducirAudioActionPerformed(evt);
            }
        });
        herramientaSonido.add(botonReproducirAudio);

        botonDetenerAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/stop24x24.png"))); // NOI18N
        botonDetenerAudio.setFocusable(false);
        botonDetenerAudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDetenerAudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDetenerAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDetenerAudioActionPerformed(evt);
            }
        });
        herramientaSonido.add(botonDetenerAudio);

        herramientaSonido.add(listaReproduccionAudio);

        botonGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/record24x24.png"))); // NOI18N
        botonGrabarAudio.setFocusable(false);
        botonGrabarAudio.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrabarAudio.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrabarAudio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarAudioActionPerformed(evt);
            }
        });
        herramientaSonido.add(botonGrabarAudio);

        tiempoAudio.setText("00:00");
        herramientaSonido.add(tiempoAudio);

        jTabbedPane1.addTab("Sonido", herramientaSonido);

        herramientasVideo.setRollover(true);

        reproducirVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/Play.png"))); // NOI18N
        reproducirVideo.setFocusable(false);
        reproducirVideo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reproducirVideo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reproducirVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reproducirVideoActionPerformed(evt);
            }
        });
        herramientasVideo.add(reproducirVideo);

        pararVideo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/Stop.png"))); // NOI18N
        pararVideo.setFocusable(false);
        pararVideo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pararVideo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pararVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pararVideoActionPerformed(evt);
            }
        });
        herramientasVideo.add(pararVideo);

        webcam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/Camara.png"))); // NOI18N
        webcam.setFocusable(false);
        webcam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        webcam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        webcam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webcamActionPerformed(evt);
            }
        });
        herramientasVideo.add(webcam);

        capturas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/Capturar.png"))); // NOI18N
        capturas.setFocusable(false);
        capturas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        capturas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        capturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capturasActionPerformed(evt);
            }
        });
        herramientasVideo.add(capturas);

        jTabbedPane1.addTab("Video", herramientasVideo);

        barraSuperior.add(jTabbedPane1);

        getContentPane().add(barraSuperior, java.awt.BorderLayout.PAGE_START);

        barraInferior.setLayout(new java.awt.BorderLayout());

        barraEstado.setText("Hola");
        barraEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        barraInferior.add(barraEstado, java.awt.BorderLayout.SOUTH);

        herramientasImagen2.setRollover(true);

        panelBrillo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelBrillo.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Brillo");
        panelBrillo.add(jLabel1, java.awt.BorderLayout.NORTH);

        sliderBrillo.setMaximum(200);
        sliderBrillo.setMinimum(-200);
        sliderBrillo.setValue(0);
        sliderBrillo.setPreferredSize(new java.awt.Dimension(100, 16));
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });
        panelBrillo.add(sliderBrillo, java.awt.BorderLayout.CENTER);

        herramientasImagen2.add(panelBrillo);
        herramientasImagen2.add(jSeparator4);

        panelContraste.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelContraste.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("Contraste");
        panelContraste.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        botonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/contraste.png"))); // NOI18N
        botonContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteActionPerformed(evt);
            }
        });
        botonesContraste.add(botonContraste);

        botonContrasteIluminado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/iluminar.png"))); // NOI18N
        botonContrasteIluminado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteIluminadoActionPerformed(evt);
            }
        });
        botonesContraste.add(botonContrasteIluminado);

        botonContrasteOscurecido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/oscurecer.png"))); // NOI18N
        botonContrasteOscurecido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteOscurecidoActionPerformed(evt);
            }
        });
        botonesContraste.add(botonContrasteOscurecido);

        panelContraste.add(botonesContraste, java.awt.BorderLayout.CENTER);

        herramientasImagen2.add(panelContraste);
        herramientasImagen2.add(jSeparator6);

        panelRotacion.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelRotacion.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Rotacion");
        panelRotacion.add(jLabel4, java.awt.BorderLayout.PAGE_START);

        sliderRotacion.setMaximum(360);
        sliderRotacion.setValue(0);
        sliderRotacion.setPreferredSize(new java.awt.Dimension(100, 16));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        jPanel1.add(sliderRotacion);

        rotacion90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/rotacion90.png"))); // NOI18N
        rotacion90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90ActionPerformed(evt);
            }
        });
        jPanel1.add(rotacion90);

        rotacion180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/rotacion180.png"))); // NOI18N
        rotacion180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180ActionPerformed(evt);
            }
        });
        jPanel1.add(rotacion180);

        rotacion270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/rotacion270.png"))); // NOI18N
        rotacion270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270ActionPerformed(evt);
            }
        });
        jPanel1.add(rotacion270);

        panelRotacion.add(jPanel1, java.awt.BorderLayout.CENTER);

        herramientasImagen2.add(panelRotacion);
        herramientasImagen2.add(jSeparator8);

        panelEscala.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelEscala.setLayout(new java.awt.BorderLayout());

        jLabel5.setText("Escala");
        panelEscala.add(jLabel5, java.awt.BorderLayout.PAGE_START);

        aumentarEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/aumentar.png"))); // NOI18N
        aumentarEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarEscalaActionPerformed(evt);
            }
        });
        jPanel2.add(aumentarEscala);

        disminuirEscala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/disminuir.png"))); // NOI18N
        disminuirEscala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuirEscalaActionPerformed(evt);
            }
        });
        jPanel2.add(disminuirEscala);

        panelEscala.add(jPanel2, java.awt.BorderLayout.CENTER);

        herramientasImagen2.add(panelEscala);
        herramientasImagen2.add(jSeparator9);

        panelColor.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        panelColor.setLayout(new java.awt.BorderLayout());

        labelColor.setText("Color");
        panelColor.add(labelColor, java.awt.BorderLayout.PAGE_START);

        botonColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/bandas.png"))); // NOI18N
        botonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonColorActionPerformed(evt);
            }
        });
        botonesColor.add(botonColor);

        comboBoxEspaciosColor.setRenderer(new CellRendererColorSpace());
        comboBoxEspaciosColor.setModel(new javax.swing.DefaultComboBoxModel(new Integer[] { ColorSpace.CS_sRGB, ColorSpace.CS_PYCC, ColorSpace.CS_GRAY}));
        comboBoxEspaciosColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxEspaciosColorActionPerformed(evt);
            }
        });
        botonesColor.add(comboBoxEspaciosColor);

        panelColor.add(botonesColor, java.awt.BorderLayout.CENTER);

        herramientasImagen2.add(panelColor);
        herramientasImagen2.add(jSeparator10);

        panelOtros.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        botonTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/tintar.png"))); // NOI18N
        botonTintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTintadoActionPerformed(evt);
            }
        });
        panelOtros.add(botonTintado);

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/sepia.png"))); // NOI18N
        botonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSepiaActionPerformed(evt);
            }
        });
        panelOtros.add(botonSepia);

        botonEqualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/ecualizar.png"))); // NOI18N
        botonEqualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEqualizarActionPerformed(evt);
            }
        });
        panelOtros.add(botonEqualizar);

        botonFiltroRojo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/rojo.png"))); // NOI18N
        botonFiltroRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFiltroRojoActionPerformed(evt);
            }
        });
        panelOtros.add(botonFiltroRojo);

        sliderPosterizar.setMaximum(40);
        sliderPosterizar.setMinimum(2);
        sliderPosterizar.setPreferredSize(new java.awt.Dimension(100, 16));
        sliderPosterizar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPosterizarStateChanged(evt);
            }
        });
        sliderPosterizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderPosterizarFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderPosterizarFocusLost(evt);
            }
        });
        panelOtros.add(sliderPosterizar);

        herramientasImagen2.add(panelOtros);

        barraInferior.add(herramientasImagen2, java.awt.BorderLayout.CENTER);

        getContentPane().add(barraInferior, java.awt.BorderLayout.PAGE_END);
        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");

        opcionNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/nuevo.png"))); // NOI18N
        opcionNuevo.setText("Nuevo");
        opcionNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionNuevo);

        opcionAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/abrir.png"))); // NOI18N
        opcionAbrir.setText("Abrir Imagen");
        opcionAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionAbrir);

        opcionGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/guardar.png"))); // NOI18N
        opcionGuardar.setText("Guardar");
        opcionGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opcionGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(opcionGuardar);

        barraMenu.add(menuArchivo);

        menuEdicion.setText("Ver");

        visibilidadGraficos.setText("Herramientas de Graficos");
        visibilidadGraficos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadGraficosActionPerformed(evt);
            }
        });
        menuEdicion.add(visibilidadGraficos);

        visibilidadImagen.setText("Herramientas de Imagen");
        visibilidadImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadImagenActionPerformed(evt);
            }
        });
        menuEdicion.add(visibilidadImagen);

        visibilidadSonido.setText("Herramientas de Sonido");
        visibilidadSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadSonidoActionPerformed(evt);
            }
        });
        menuEdicion.add(visibilidadSonido);

        visibilidadVideo.setText("Herramientas de Video");
        visibilidadVideo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadVideoActionPerformed(evt);
            }
        });
        menuEdicion.add(visibilidadVideo);

        visibilidadBarraEstado.setText("Ver barra de estado");
        visibilidadBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visibilidadBarraEstadoActionPerformed(evt);
            }
        });
        menuEdicion.add(visibilidadBarraEstado);

        barraMenu.add(menuEdicion);

        jMenu1.setText("Ayuda");

        jMenuItem1.setText("Acerca de");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        barraMenu.add(jMenu1);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Se crea un nuevo MarcoSecundario, se añade a un vector donde se 
     * almacenarán todas las ventanas internas generadas y se establece el 
     * estado de los botones del MarcoPrimario respecto a las propiedades de 
     * inicio del lienzo.
     * 
     * Además, se añade al MarcoSecundario un manejador de eventos, el cual 
     * viene explicado en el lugar donde se define su clase.
     */
    private void opcionNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionNuevoActionPerformed
        nuevoMarcoSecundario();
    }//GEN-LAST:event_opcionNuevoActionPerformed

    private void nuevoMarcoSecundario(){
        lienzos.add(new MarcoSecundario());
        escritorio.add(lienzos.get(lienzos.size()-1));
        lienzos.get(lienzos.size()-1).setVisible(true);
        
        ventanaActiva=lienzos.get(lienzos.size()-1);
        ventanaActiva.addInternalFrameListener(manejador);
        ventanaActiva.getLienzo().addLienzoListener(manejadorLienzo);
        
        cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        
        cambiarEstadoPropiedades(ventanaActiva.getLienzo().isEditar(),
                                 ventanaActiva.getLienzo().isAlisado(),
                                 ventanaActiva.getLienzo().isTransparencia(),
                                 ventanaActiva.getLienzo().isRelleno());
        
        if(ventanaActiva.getLienzo().isRellenoColorActivado()){
            seleccionarColor((Color)ventanaActiva.getLienzo().getColorRelleno(), seleccionColores);
        }
        else{
            seleccionarColor((Color)ventanaActiva.getLienzo().getColorTrazo(), seleccionColores);   
        }
        
        cambiarValorGrosor(ventanaActiva.getLienzo().getGrosor());
        
        MiBufferedImage img=new MiBufferedImage(1000,1000,BufferedImage.TYPE_INT_ARGB_PRE);
        ventanaActiva.getLienzo().setImagenFondo(img);
    }
    
    /**
     * Acciones realizadas al seleccionar en la barra de herramientas el modo
     * punto. Primero se cambia en el objeto lienzo de la ventanaActiva
     * el atributo herramienta, y después se cambia el estado de la sección de 
     * herramientas del MarcoPrincipal para que concuerde con el elemento 
     * seleccionado.
     *
     * @param evt 
     */
    private void modoPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoPuntoActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setHerramienta(Herramientas.Punto);
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        } 
    }//GEN-LAST:event_modoPuntoActionPerformed

    /**
     * Acciones realizadas al seleccionar en la barra de herramientas el modo
     * línea. Primero se cambia en el objeto lienzo de la ventanaActiva
     * el atributo herramienta, y después se cambia el estado de la sección de 
     * herramientas del MarcoPrincipal para que concuerde con el elemento 
     * seleccionado.
     * 
     * @param evt 
     */
    private void modoLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoLineaActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setHerramienta(Herramientas.Linea);
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        }
    }//GEN-LAST:event_modoLineaActionPerformed

    /**
     * Acciones realizadas al seleccionar en la barra de herramientas el modo
     * rectángulo. Primero se cambia en el objeto lienzo de la ventanaActiva
     * el atributo herramienta, y después se cambia el estado de la sección de 
     * herramientas del MarcoPrincipal para que concuerde con el elemento 
     * seleccionado.
     * 
     * @param evt 
     */
    private void modoRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoRectanguloActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setHerramienta(Herramientas.Cuadrado);
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        }
    }//GEN-LAST:event_modoRectanguloActionPerformed

    /**
     * Acciones realizadas al seleccionar en la barra de herramientas el modo
     * elipse/óvalo. Primero se cambia en el objeto lienzo de la ventanaActiva
     * el atributo herramienta, y después se cambia el estado de la sección de 
     * herramientas del MarcoPrincipal para que concuerde con el elemento 
     * seleccionado.
     * 
     * @param evt 
     */
    private void modoElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoElipseActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setHerramienta(Herramientas.Ovalo);
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
        }
    }//GEN-LAST:event_modoElipseActionPerformed

    /**
     * Accion realizada al seleccionar en el menu de edición la visibilidad de 
     * la barra de estado.
     * 
     * @param evt 
     */
    private void visibilidadImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadImagenActionPerformed
        herramientasGraficos.setVisible(false);
        herramientasImagen.setVisible(true);
        herramientasImagen2.setVisible(true);
        herramientaSonido.setVisible(false);
        herramientasVideo.setVisible(false);
    }//GEN-LAST:event_visibilidadImagenActionPerformed

    /**
     * Accion realizada al seleccionar en el menu de archivo la opción abrir. No
     * se abre ningún archivo ya que no tendría sentido en el programa, solo se 
     * abre la ventana de diálogo correspondiente.
     * 
     * @param evt 
     */
    private void opcionAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionAbrirActionPerformed
        FileFilter filtroJPEG=new FileNameExtensionFilter("JPEG", "jpg", "jpeg");
        FileFilter filtroPNG=new FileNameExtensionFilter("PNG", "png");
        FileFilter filtroWAV=new FileNameExtensionFilter("WAV", "wav");
        FileFilter filtroAU=new FileNameExtensionFilter("AU", "au");
        FileFilter filtroMP4=new FileNameExtensionFilter("MP4", "mp4");
        
        JFileChooser dlg=new JFileChooser();
        
        dlg.addChoosableFileFilter(filtroJPEG);
        dlg.addChoosableFileFilter(filtroPNG);
        dlg.addChoosableFileFilter(filtroWAV);
        dlg.addChoosableFileFilter(filtroAU);
        dlg.addChoosableFileFilter(filtroMP4);
        
        int resp=dlg.showOpenDialog(this);
        if(resp==JFileChooser.APPROVE_OPTION){
            try{
                String nombreArchivo=dlg.getSelectedFile().getName();
                String extension=nombreArchivo.substring(nombreArchivo.lastIndexOf("."));
                
                if(extension.equals(".jpg") || extension.equals(".jpeg") || extension.equals(".png")){
                    File f =dlg.getSelectedFile();
                    BufferedImage img=ImageIO.read(f);
                    opcionNuevoActionPerformed(evt);
                    ventanaActiva.getLienzo().setImagenFondo(img);
                    ventanaActiva.setName(f.getName());
                }
                else if(extension.equals(".wav") || extension.equals(".au")){
                    File f =new File(dlg.getSelectedFile().getAbsolutePath()){
                        @Override
                        public String toString(){
                            return this.getName();
                        }
                    };
                    listaReproduccionAudio.addItem(f);
                }
                else if(extension.equals(".mp4")){
                    File f =new File(dlg.getSelectedFile().getAbsolutePath());
                    VentanaInternaVideo vi=VentanaInternaVideo.getInstance(f);
                    vi.addMediaPlayerEventListener(new VideoListener());
                    escritorio.add(vi);
                    vi.setVisible(true);
                }

            }
            catch(Exception ex){
                System.err.println("Error al leer el archivo");
                
                MiDialogo diag=new MiDialogo(this,true,"Error al leer el archivo");
                diag.setLocation((this.getWidth()/2)-diag.getWidth()/2,
                                 (this.getHeight()/2)-diag.getHeight()/2);
                diag.setVisible(true);
            }
        }
    }//GEN-LAST:event_opcionAbrirActionPerformed

    /**
     * Accion realizada al seleccionar en el menu de archivo la opción guardar. No
     * se guarda ningún archivo ya que no tendría sentido en el programa, solo se 
     * abre la ventana de diálogo correspondiente.
     * 
     * @param evt 
     */
    private void opcionGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opcionGuardarActionPerformed
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(true);
            FileFilter filtroJPEG=new FileNameExtensionFilter("JPEG/JPG", "jpg", "jpeg");
            FileFilter filtroPNG=new FileNameExtensionFilter("PNG", "png");
            
            if(img!=null){
                JFileChooser dlg=new JFileChooser();
                dlg.addChoosableFileFilter(filtroJPEG);
                dlg.addChoosableFileFilter(filtroPNG);
                int resp=dlg.showSaveDialog(this);
                
                if(resp==JFileChooser.APPROVE_OPTION){
                    try{
                        File f =dlg.getSelectedFile();
                        if(dlg.getFileFilter()==filtroPNG){
                            ImageIO.write(img,"png",f);
                        }
                        else{
                            ImageIO.write(img,"jpg",f);
                        }
                        ventanaActiva.setTitle(f.getName());
                    }
                    catch(Exception ex){
                        System.err.println("Error al guardar imagen");
                        
                        MiDialogo diag=new MiDialogo(this,true,"Error al guardar la imagen");
                        diag.setLocation((this.getWidth()/2)-diag.getWidth()/2,
                                         (this.getHeight()/2)-diag.getHeight()/2);
                        diag.setVisible(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_opcionGuardarActionPerformed

    /**
     * Método para recoger el valor del selector de grosor tras realizarse un 
     * cambio sobre el; y enviarlo a la ventana interna activa en ese momento.
     * @param evt 
     */
    private void selectorGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_selectorGrosorStateChanged
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setGrosor((int)selectorGrosor.getValue());
            propertyChange();
        }
    }//GEN-LAST:event_selectorGrosorStateChanged

    /**
     * Método para ocultar los botones de selección de formas.
     * @param evt 
     */
    private void visibilidadSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadSonidoActionPerformed
        herramientasGraficos.setVisible(false);
        herramientasImagen.setVisible(false);
        herramientasImagen2.setVisible(false);
        herramientaSonido.setVisible(true);
        herramientasVideo.setVisible(false);
    }//GEN-LAST:event_visibilidadSonidoActionPerformed

    /**
     * Método para ocultar los botones de selección de atributos.
     * @param evt 
     */
    private void visibilidadBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadBarraEstadoActionPerformed
        barraEstado.setVisible(!barraEstado.isVisible());
    }//GEN-LAST:event_visibilidadBarraEstadoActionPerformed

    /**
     * Método que establece al lienzo el atributo color, seleccionado en el menú
     * desplegable.
     * @param evt 
     */
    private void seleccionColoresItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_seleccionColoresItemStateChanged
        if(ventanaActiva!=null){
            if(ventanaActiva.getLienzo().isRellenoColorActivado()){   
                ventanaActiva.getLienzo().setColorRelleno((Color)evt.getItem());
            }
            else{
                ventanaActiva.getLienzo().setColorTrazo((Color)evt.getItem());
            }
            propertyChange();
        }
    }//GEN-LAST:event_seleccionColoresItemStateChanged

    /**
     * Método que establece las acciones a realizar cuando se actua sobre el 
     * botón correspondiente al modo editar
     * @param evt 
     */
    private void modoEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoEditarActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setEditar(!ventanaActiva.getLienzo().isEditar());
            if(ventanaActiva.getLienzo().isEditar())
                barraEstado.setText("Modo editar activado");
            else
                barraEstado.setText("Modo editar desactivado");
        }
    }//GEN-LAST:event_modoEditarActionPerformed

    /**
     * Método que establece las acciones a realizar cuando se actua sobre el 
     * botón correspondiente al modo relleno
     * @param evt 
     */
    private void modoRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoRellenoActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setRelleno(!ventanaActiva.getLienzo().isRelleno());
            if(ventanaActiva.getLienzo().isRelleno())
                barraEstado.setText("Relleno activado");
            else
                barraEstado.setText("Relleno desactivado");
            propertyChange();
        }
    }//GEN-LAST:event_modoRellenoActionPerformed

    /**
     * Método que establece las acciones a realizar cuando se actua sobre el 
     * botón correspondiente al modo transparencia
     * @param evt 
     */
    private void modoTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoTransparenciaActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setTransparencia(!ventanaActiva.getLienzo().isTransparencia());
            if(ventanaActiva.getLienzo().isTransparencia())
                barraEstado.setText("Modo transparencia activado");
            else
                barraEstado.setText("Modo transparencia desactivado");
            propertyChange();
        }
    }//GEN-LAST:event_modoTransparenciaActionPerformed

    /**
     * Método que establece las acciones a realizar cuando se actua sobre el 
     * botón correspondiente al modo alisar
     * @param evt 
     */
    private void modoAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoAlisarActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setAlisado(!ventanaActiva.getLienzo().isAlisado());
            if(ventanaActiva.getLienzo().isAlisado())
                barraEstado.setText("Modo alisado activado");
            else
                barraEstado.setText("Modo alisado desactivado");
            propertyChange();
        }
    }//GEN-LAST:event_modoAlisarActionPerformed

    private void botonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNuevoActionPerformed
        opcionNuevoActionPerformed(evt);
    }//GEN-LAST:event_botonNuevoActionPerformed

    private void botonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbrirActionPerformed
        opcionAbrirActionPerformed(evt);
    }//GEN-LAST:event_botonAbrirActionPerformed

    private void botonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGuardarActionPerformed
        opcionGuardarActionPerformed(evt);
    }//GEN-LAST:event_botonGuardarActionPerformed
    
   
    /**
     * Cambia el brillo de una imagen.
     * 
     * Tambien contiene el codigo para tratar imagenes con canal alpha.
     * @param evt 
     */
    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        if(ventanaActiva!=null){
            int brillo=sliderBrillo.getValue();
            if(imagenAux!=null){
                try{
                    RescaleOp rop;
                    if(imagenAux.getColorModel().hasAlpha()){
                        float[] scale={1.0F,1.0F,1.0F,1.0F};
                        float[] br={brillo,brillo,brillo,0};//Ponemos el ultimo parametro a 0 para no cambiar alpha                 
                        rop=new RescaleOp(scale,br,null);
                    }
                    else{
                        float scale=1.0F;
                        float br=brillo;
                        rop=new RescaleOp(scale,br,null);
                    }
                    rop.filter(imagenAux, ventanaActiva.getLienzo().getImagenFondo(false));
                    this.repaint(); //Cambiado para que los efectos de cambio de brillo en bandas se aprecien automaticamente
                }
                catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sliderBrilloStateChanged

    /**
     * En esta funcion al ganar el foco el slider tenemos que crear una copia de 
     * la imagen, para poder interactuar sobre ella y no sobre la imagen generada,
     * ya que si no el brillo no se aplicaria correctamente.
     * @param evt 
     */
    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        copiaImagen();
    }//GEN-LAST:event_sliderBrilloFocusGained

    /**
     * Cuando eliminamos el foco del slider, eliminamos el valor de imagenAux, lo
     * que nos servira indirectamente para guardar el estado del brillo de una 
     * imagen. Tambien establecemos el valor del slider a 0 para que, al volver a 
     * cambiar el brillo en un momento posterior, no tengamos la barra en un valor
     * no nulo.
     * @param evt 
     */
    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        imagenAux=null;
        sliderBrillo.setValue(0);
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void comboFiltroItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboFiltroItemStateChanged
        Kernel k;
        
        if((int)comboFiltro.getSelectedItem()<6)
            k=KernelProducer.createKernel((int)comboFiltro.getSelectedItem());
        else if((int)comboFiltro.getSelectedItem()==6){
            k=MisFiltros.createMedia5x5();
        }
        else{
            k=MisFiltros.createMedia7x7();
        }
        
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                try{
                    ConvolveOp cop=new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                    BufferedImage dest=cop.filter(img, null);
                    ventanaActiva.getLienzo().setImagenFondo(dest);
                    ventanaActiva.getLienzo().repaint();
                }
                catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_comboFiltroItemStateChanged

    private void cambioTamaño(double factor){
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                try{
                    AffineTransform at=AffineTransform.getScaleInstance(factor, factor);
                    AffineTransformOp atop=new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage dest=atop.filter(img,null);
                    ventanaActiva.getLienzo().setImagenFondo(dest);
                    ventanaActiva.repaint();
                }
                catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
   
    private void combinarBandas(float[][] matriz){
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                try{
                    
                    BandCombineOp bcop=new BandCombineOp(matriz,null);
                    bcop.filter(img.getRaster(), img.getRaster());
                    ventanaActiva.getLienzo().repaint();
                }
                catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    /**
     * Debido al bug no documentado, el segundo parametro del metodo filter no
     * es null para asegurar que no se intercambian los canales B y R. Ademas
     * usaremos en los 3 siguientes metodos funciones ya definidas para aplicar 
     * el filtro deseado. En este primer caso, aplicamos una funcion-S. Esta 
     * funcion depende de m (refiriendonos a la formula de las transparencias)
     * ya que cuando x=m el valor resultante es el valor medio entre 0 y 255.
     */
    private void botonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteActionPerformed
        contraste(LookupTableProducer.TYPE_SFUNCION);
    }//GEN-LAST:event_botonContrasteActionPerformed

    /**
     * En este caso, aplicamos una funcion logaritmica, la cual sigue una curva
     * que nos da resultados para cada x mayores que si usasemos
     * una funcion lineal. Esta funcion aumentaria mucho el brillo, pero tenemos 
     * otras opciones como aplicar una correccion gamma, siendo el valor de esta
     * mayor que 1, o usar una funcion raiz que tiene una curva menos pronunciada.
     * @param evt 
     */
    private void botonContrasteIluminadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteIluminadoActionPerformed
        contraste(LookupTableProducer.TYPE_LOGARITHM);
    }//GEN-LAST:event_botonContrasteIluminadoActionPerformed

    /**
     * En este caso aplicamos una funcion potencial, con la cual si observamos
     * su curva, los valores obtenidos para cada x son menores que si usasemos
     * una funcion lineal, por tanto para imagenes con mucho brillo conseguimos 
     * un oscurecimiento de la misma. Otra opcion seria usar una correccion gamma,
     * siendo esta un valor entre 0 y 1.
     * @param evt 
     */
    private void botonContrasteOscurecidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteOscurecidoActionPerformed
        contraste(LookupTableProducer.TYPE_POWER);
    }//GEN-LAST:event_botonContrasteOscurecidoActionPerformed

    private void contraste(int tipo){
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                try{
                    LookupTable lt=LookupTableProducer.createLookupTable(tipo);
                    LookupOp lop=new LookupOp(lt,null);
                    lop.filter(img,img);
                    ventanaActiva.repaint();
                }
                catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
        
    }
    
    private void botonCuadraticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCuadraticaActionPerformed
        if(ventanaActiva!=null){
            imagenAux=ventanaActiva.getLienzo().getImagenFondo(false);
            aplicarCuadratica(128);
        }
        imagenAux=null;
    }//GEN-LAST:event_botonCuadraticaActionPerformed

    private void aplicarCuadratica(double m){
        if(ventanaActiva!=null){
            if(imagenAux!=null){
                try{
                    LookupTable lt=cuadratica(m);
                    LookupOp lop=new LookupOp(lt,null);
                    BufferedImage dest=lop.filter(imagenAux,null);
                    ventanaActiva.getLienzo().setImagenFondo(dest);
                    ventanaActiva.repaint();
                }
                catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    /**
     * Se usan los mismos objetos que con el escalado por lo que el procedimiento
     * y el uso que recibe cada objeto es similar, pero existen dos diferencias
     * en este metodo:
     * 
     * - Tenemos que establecer el punto central de la imagen para realizar la 
     * rotacion, y asi, conseguir que la imagen no se desplace al realizar la 
     * operacion
     * 
     * - Para realizar la rotacion libre tenemos que hacerla sobre la imagen 
     * original, por tanto emplearemos la misma forma de actuar con el slider
     * de brillo. Es decir, cuando este elemento gane el foco, cargaremos la 
     * imagen original y todas las rotaciones que realicemos se haran sobre ella.
     * Asi conseguiremos rotar la imagen con el valor deseado, y que no se 
     * acumulen las rotaciones.
     * @param evt 
     */
    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        rotacion(sliderRotacion.getValue(), true);
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void rotacion(int grados, boolean libre){
        if(ventanaActiva!=null){
            if(imagenAux!=null || !libre){
                try{
                    double r=Math.toRadians(grados);
                    Point centro=new Point(imagenAux.getWidth()/2,imagenAux.getHeight()/2);
                    AffineTransform at=AffineTransform.getRotateInstance(r, centro.x, centro.y);
                    AffineTransformOp atop=new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage dest=atop.filter(imagenAux, null);
                    ventanaActiva.getLienzo().setImagenFondo(dest);
                    ventanaActiva.repaint();
                }
                catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    private void rotacion90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90ActionPerformed
        copiaImagen();
        rotacion(90, false);
        imagenAux=null;
    }//GEN-LAST:event_rotacion90ActionPerformed

    private void rotacion180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180ActionPerformed
        copiaImagen();
        rotacion(180, false);
        imagenAux=null;
    }//GEN-LAST:event_rotacion180ActionPerformed

    private void rotacion270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270ActionPerformed
        copiaImagen();
        rotacion(270, false);
        imagenAux=null;
    }//GEN-LAST:event_rotacion270ActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        copiaImagen();
    }//GEN-LAST:event_sliderRotacionFocusGained
    
    private void copiaImagen(){
        if(ventanaActiva!=null){
            ColorModel cm=ventanaActiva.getLienzo().getImagenFondo(false).getColorModel();
            WritableRaster raster=ventanaActiva.getLienzo().getImagenFondo(false).copyData(null);
            boolean alfaPre=ventanaActiva.getLienzo().getImagenFondo(false).isAlphaPremultiplied();
            imagenAux=new BufferedImage(cm,raster,alfaPre,null);
        }
    }
    
    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        imagenAux=null;
        sliderRotacion.setValue(0);
    }//GEN-LAST:event_sliderRotacionFocusLost
    
    private void aumentarEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarEscalaActionPerformed
        cambioTamaño(1.25);
    }//GEN-LAST:event_aumentarEscalaActionPerformed

    private void disminuirEscalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirEscalaActionPerformed
        cambioTamaño(0.75);
    }//GEN-LAST:event_disminuirEscalaActionPerformed

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed
        negativo();
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void duplicadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicadoActionPerformed
        if(ventanaActiva!=null){
            imagenAux=ventanaActiva.getLienzo().getImagenFondo(true);
            if(imagenAux!=null){
                nuevoMarcoSecundario();
                //A partir de aqui la ventana nueva seria la ventanaActiva
                ventanaActiva.getLienzo().setImagenFondo(imagenAux);
                imagenAux=null;
            }
        }
    }//GEN-LAST:event_duplicadoActionPerformed

    private void sliderMFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderMFocusGained
        copiaImagen();
    }//GEN-LAST:event_sliderMFocusGained

    private void sliderMFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderMFocusLost
        imagenAux=null;
        sliderM.setValue(128);
    }//GEN-LAST:event_sliderMFocusLost

    private void sliderMStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMStateChanged
        aplicarCuadratica(sliderM.getValue());
    }//GEN-LAST:event_sliderMStateChanged

    /**
     * Con este metodo crearemos una nueva ventana secundaria por cada banda,
     * ademas de generar la imagen correspondiente con el metodo getImageBand.
     * @param evt 
     */
    
    private void botonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonColorActionPerformed
        if(ventanaActiva!=null){
            BufferedImage img = ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                for(int i=0; i<3; i++){
                    nuevoMarcoSecundario(); //Se establece automaticamente como ventanaActiva
                    ventanaActiva.getLienzo().setImagenFondo(getImageBand(img,i));
                    ventanaActiva.setTitle("Banda "+i);
                }
            }
        }
    }//GEN-LAST:event_botonColorActionPerformed

    /**
     * Con este metodo extraemos una determinada banda de una imagen y las 
     * proyectamos en un nuevo marco secundario cada una. Por tanto, para cada
     * banda debemos crear una nueva imagen, la cual tendra un espacio de color
     * gris (crearemos por tanto un nuevo modelo de color con las caracteristicas
     * indicadas y el espacio de color gris); ademas de crear un nuevo Raster 
     * para la imagen el cual sera del tipo WritableRaster (que nos permite 
     * vincularlo con el raster del que proviene, provocando que los cambios 
     * producidos en el nuevo raster se apliquen en la imagen original). 
     * 
     * Con estos dos objetos crearemos una nueva imagen, la cual sera el resultado
     * tras haberse ejecutado este metodo.
     * @param img
     * @param banda
     * @return 
     */
    private BufferedImage getImageBand(BufferedImage img, int banda){
        ColorSpace cs=new GreyColorSpace();
        
        ComponentColorModel cm=new ComponentColorModel(cs,false,false,
                                Transparency.OPAQUE, DataBuffer.TYPE_BYTE);
        
        int vband[]={banda};
        
        WritableRaster bRaster=(WritableRaster) img.getRaster().createWritableChild(0, 
                                0, img.getWidth(), img.getHeight(), 0, 0, vband);
        
        return new BufferedImage(cm, bRaster, false, null);
    }
    
    /**
     * En esta funcion se describe la accion al pulsar el boton de combinado de 
     * bandas.
     * 
     * En este caso tenemos dos matrices. La primera corresponde a una transformacion
     * donde cada banda sera sustituida por el valor medio de las otras 2 (por 
     * tanto, cada fila tendra el valor de la banda a la que corresponde a 0 
     * mientras que los otros dos tendran su valor a 0.5).
     * 
     * La segunda en cambio el efecto que tendra sera un enverdecimiento de la 
     * imagen. Para conseguir este efecto, reducimos en los pixeles resultantes
     * los valores de las bandas azul y roja a la mitad, mientras que la banda
     * verde mantendra el mismo valor. Para conseguir un mayor o menor 
     * enverdecimiento, por tanto, deberiamos aumentar o reducir el valor de la
     * matriz correspondiente a los otros dos componentes. 
     * 
     * @param evt 
     */
    private void botonCombinarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCombinarActionPerformed
        float[][] matriz={{0.0F,0.5F,0.5F},
                          {0.5F,0.0F,0.5F},
                          {0.5F,0.5F,0.0F}};
        
        float[][] matriz2={{0.5F,0.0F,0.0F}, 
                           {0.0F,1.0F,0.0F},
                           {0.0F,0.0F,0.5F}};
        combinarBandas(matriz);
    }//GEN-LAST:event_botonCombinarActionPerformed

    /**
     * Accion ejecutada al seleccionarse un espacio de color en el comboBox 
     * correspondiente. Para ello, generaremos el objeto ColorSpace que reuna
     * las caracteristicas que el usuario haya seleccionado en el menu desplegable.
     * 
     * Posteriormente, comprobamos si el espacio de color seleccionado es el mismo
     * que el de la imagen original, y si es asi, no realizamos accion alguna. 
     * En cambio, si hay que modificar el espacio de color, creamos un nuevo
     * marco secundario y establecemos como imagen el resultado de aplicar 
     * la operacion ColorConvert a la imagen original. 
     * 
     * Remarcar que las imagenes YCC responden de manera distinta a las RGB 
     * cuando se cambia el brillo de sus bandas, ya que el Y representa la 
     * intensidad (si variamos el brillo en esta banda cambiaria el brillo de 
     * la imagen original), mientras que CC (Cb y Cr) son los componentes de 
     * crominancia diferencia de azul y diferencia de rojo respectivamente.
     * 
     * Estos dos valores son resultado de la diferencia entre los componentes 
     * azul y rojo de una imagen con la intensidad, y definen el color que 
     * tendra una imagen.
     * 
     * @param evt 
     */
    private void comboBoxEspaciosColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxEspaciosColorActionPerformed
        ColorSpace cs=null;
        if((int)comboBoxEspaciosColor.getSelectedItem()!=ColorSpace.CS_GRAY)
            cs=ColorSpace.getInstance((int)comboBoxEspaciosColor.getSelectedItem());
        else if((int)comboBoxEspaciosColor.getSelectedItem()==ColorSpace.CS_GRAY){
            cs=new sm.image.color.GreyColorSpace();
        }
        
        if(ventanaActiva!=null && cs!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null)
                if(!cs.equals(img.getColorModel().getColorSpace())){
                    nuevoMarcoSecundario(); //A partir de aqui la ventana activa es la creada
                    ColorConvertOp cop=new ColorConvertOp(cs, null);
                    ventanaActiva.getLienzo().setImagenFondo(cop.filter(img,null));
                    ventanaActiva.getLienzo().repaint();
                    
                    switch((int)comboBoxEspaciosColor.getSelectedItem()){
                    case ColorSpace.CS_GRAY: 
                        ventanaActiva.setTitle("Espacio de color gris");
                    break;

                    case ColorSpace.CS_sRGB:
                        ventanaActiva.setTitle("Espacio de color RGB");
                    break;

                    case ColorSpace.CS_PYCC:
                        ventanaActiva.setTitle("Espacio de color YCC");
                    break;
                    }
                }
        }
    }//GEN-LAST:event_comboBoxEspaciosColorActionPerformed

    /**
     * El objeto TintOp de la libreria sm.image teñira una imagen del color 
     * que nosotros indiquemos en el comboBox de colores.
     * 
     * La operacion consiste, por tanto, en sumarle al vector RGB de cada pixel
     * de una imagen otra tupla RGB cuyo valor sera el color de tintado (multiplicado
     * por un alpha que determinara el grado de tintado a aplicar).
     * 
     * Los dos metodos que usaremos de la clase seran el constructor y filter.
     * El primero establece el color de tintado y el grado de aplicacion; mientras
     * que el segundo realiza la accion de teñir la imagen, siguiendo estos 
     * pasos:
     * 
     * - Si la imagen de destino se pasa como null, se crea una nueva imagen 
     * con las caracteristicas de la imagen original.
     * 
     * - Se crea un WritableRaster que contenga el raster de la imagen destino
     * para editar el contenido de la misma.
     * 
     * - Se ejecuta un bucle anidado donde, para cada banda de cada pixel, se
     * obtiene el valor original, se le aplica la operacion antes mencionada 
     * (suma del componente del tinte correspondiente y la banda del pixel) y 
     * el resultado se establece como nuevo valor de dicho componente.
     * 
     * @param evt 
     */
    private void botonTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTintadoActionPerformed
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                TintOp tintado=new TintOp((Color)seleccionColores.getSelectedItem(), 0.5F);
                tintado.filter(img, img);
                ventanaActiva.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_botonTintadoActionPerformed

    /**
     * El objeto SepiaOp aplica un filtro sepia a una imagen. 
     * @param evt 
     */
    
    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                SepiaOp sepia=new SepiaOp();
                sepia.filter(img, img);
                ventanaActiva.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_botonSepiaActionPerformed

    /**
     * Esta funcion pretende que la imagen afectada tenga un histograma con una
     * distribucion uniforme (es decir, conseguir que el numero de veces que se utilizan 
     * los posibles valores que pueda tener un pixel sean similares).
     * 
     * Normalmente esta operacion se realiza sobre imagenes en blanco y negro o
     * sobre la banda de intensidad (ya que si se realiza esta operacion 
     * directamente sobre todas las bandas de una imagen el resultado no es 
     * el esperado).
     * 
     * Para conseguirlo, este metodo hace uso de la funcion de distribucion de
     * probabilidad acumulada; la 
     * @param evt 
     */
    
    private void botonEqualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEqualizarActionPerformed
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                EqualizationOp ecualizacion=new EqualizationOp();
                ecualizacion.filter(img, img);
                ventanaActiva.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_botonEqualizarActionPerformed

    /**
     * Accion realizada al cambiar el valor de posterizacion.
     * 
     * El limite superior esta puesto en 40 para poder volver a las 
     * caracteristicas de la imagen original sin problemas.
     * @param evt 
     */
    private void sliderPosterizarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPosterizarStateChanged
        if(ventanaActiva!=null){
            if(imagenAux!=null){
                PosterizarOp post=new PosterizarOp(sliderPosterizar.getValue());
                BufferedImage dest=post.filter(imagenAux, null);
                ventanaActiva.getLienzo().setImagenFondo(dest);
                ventanaActiva.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_sliderPosterizarStateChanged

    private void sliderPosterizarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusGained
        copiaImagen();
    }//GEN-LAST:event_sliderPosterizarFocusGained

    private void sliderPosterizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderPosterizarFocusLost
        imagenAux=null;
        sliderPosterizar.setValue(256);
    }//GEN-LAST:event_sliderPosterizarFocusLost

    /**
     * Accion donde se aplica el filtro de resaltado de rojo a la imagen
     * @param evt 
     */
    
    private void botonFiltroRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFiltroRojoActionPerformed
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                RedOp rop=new RedOp(30);
                rop.filter(img, img);
                ventanaActiva.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_botonFiltroRojoActionPerformed

    /**
     * Utilizando la clase SMClipPlayer, creamos un objeto que nos permitira 
     * reproducir un audio asociado a un archivo. Ademas, antes de comenzar la
     * reproduccion, le asociamos un manejador que bloqueara el boton play al 
     * reproducir y el boton stop al estar detenido.
     * 
     * La clase SMClip se basa en el uso de lineas Clip de la API Java Sound.
     * Estos objetos clip se pueden obtener a partir del objeto AudioSystem 
     * (que representa al sistema de audio del equipo) a traves del metodo 
     * estatico getClip(). El objeto Clip proporciona la capacidad de reproducir
     * un archivo asociado, el cual se puede vincular a traves del metodo 
     * open, al que le pasaremos el stream de entrada con el metodo estatico de 
     * la clase AudioSystem getAudioInputStream(archivo). 
     * 
     * Ya con esto tendriamos todo listo para reproducir un audio, lo cual se 
     * puede iniciar con el metodo start(). Este proceso estara englobado en 
     * el metodo play().
     * @param evt 
     */
    private void botonReproducirAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonReproducirAudioActionPerformed
        File f=(File)listaReproduccionAudio.getSelectedItem();
        if(f!=null){
            player=new SMClipPlayer(f);
            if(player!=null){
                player.addLineListener(new ManejadorAudio());
                player.play();
            }
        }
    }//GEN-LAST:event_botonReproducirAudioActionPerformed

    /**
     * Detiene la reproduccion de un audio en proceso. El metodo stop solo 
     * ejecutara la operacion stop() sobre el objeto Clip correspondiente.
     * @param evt 
     */
    
    private void botonDetenerAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDetenerAudioActionPerformed
        if(player!=null){
            player.stop();
        }
    }//GEN-LAST:event_botonDetenerAudioActionPerformed

    /**
     * Gestiona el proceso de grabacion de un audio. El archivo donde se 
     * almacenara este audio sera definido antes de su grabacion (el proceso es 
     * mas simple que en sentido opuesto).
     * 
     * Un objeto de tipo SMRecorder sera el encargado de llevar a cabo estas 
     * operaciones. Trabajara con lineas de tipo Target, de la Java Sound API.
     * Para grabar una linea de este tipo, el metodo record sigue el siguiente
     * proceso:
     * 
     *      - Se define el formato de audio.
     * 
     *      - Se define el objeto linea correspondiente, el cual obtendremos 
     *      mediante el metodo de clase getLine de AudioSystem, al que le
     *      pasaremos como parametro un objeto DataLine.Info con las caracteristicas
     *      de la linea. Proporciona un mezclador por defecto y el dispositivo
     *      de entrada. Tenemos que abrir la linea para que este disponible 
     *      para recibir informacion con el metodo open, al que pasaremos como
     *      argumento el formato de audio creado anteriormente.
     * 
     *      - Se define el formato del fichero y el stream de entrada. Este 
     *      ultimo representara la informacion que tendra que ser almacenada 
     *      proveniente de la linea asociada en la construccion del objeto.
     * 
     *      - Se comienza a leer de la linea con el metodo start. La informacion
     *      capturada se escribe en el archivo asociado a la grabacion con 
     *      el metodo de clase write() perteneciente a AudioSystem; al cual 
     *      le pasaremos como parametro la informacion capturada y el archivo 
     *      donde se almacenara.
     * 
     * @param evt 
     */
    
    private void botonGrabarAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarAudioActionPerformed
        if(recorder==null){
            JFileChooser dlg=new JFileChooser();
                int resp=dlg.showSaveDialog(this);
                
                if(resp==JFileChooser.APPROVE_OPTION){
                    try{
                        File f =dlg.getSelectedFile();
                        recorder=new SMSoundRecorder(f);
                        if(recorder!=null){
                            recorder.record();
                        }
                        
                        botonGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/stopRecord24x24.png")));
                    }
                    catch(Exception ex){
                        System.err.println("Error al guardar imagen");
                        
                        MiDialogo diag=new MiDialogo(this,true,"Error al guardar la imagen");
                        diag.setLocation((this.getWidth()/2)-diag.getWidth()/2,
                                         (this.getHeight()/2)-diag.getHeight()/2);
                        diag.setVisible(true);
                    }
                }
        }
        else{
            recorder.stop();
            botonGrabarAudio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paintbasico2d/iconos/record24x24.png")));
        }
    }//GEN-LAST:event_botonGrabarAudioActionPerformed

    //CORREGIR LAS VENTANAS INTERNAS
    
    private void webcamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webcamActionPerformed
        VentanaInternaCamara ventana=VentanaInternaCamara.getInstance();
        
        escritorio.add(ventana);
        ventana.setVisible(true);
    }//GEN-LAST:event_webcamActionPerformed

    /**
     * Metodo para visualizar las herramientas de video.
     * @param evt 
     */
    
    private void visibilidadVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadVideoActionPerformed
        herramientasGraficos.setVisible(false);
        herramientasImagen.setVisible(false);
        herramientasImagen2.setVisible(false);
        herramientaSonido.setVisible(false);
        herramientasVideo.setVisible(true);
    }//GEN-LAST:event_visibilidadVideoActionPerformed

    /**
     * Realiza una captura de la instantanea actual de la webcam y la recoge en
     * una nueva ventana interna.
     * @param evt 
     */
    
    private void capturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capturasActionPerformed
        JInternalFrame ventana=escritorio.getAllFrames()[escritorio.getAllFrames().length-1];
        if(ventana.getClass()==VentanaInternaCamara.class){
            BufferedImage img=((VentanaInternaCamara)ventana).getImage();
            nuevoMarcoSecundario();
            ventanaActiva.getLienzo().setImagenFondo(img);
        }
    }//GEN-LAST:event_capturasActionPerformed

    /**
     * Comienza o continua la reproduccion de un video.
     * @param evt 
     */
    private void reproducirVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproducirVideoActionPerformed
        JInternalFrame ventana=escritorio.getAllFrames()[escritorio.getAllFrames().length-1];
        if(ventana.getClass()==VentanaInternaVideo.class){
            ((VentanaInternaVideo)ventana).play();
        }
    }//GEN-LAST:event_reproducirVideoActionPerformed

    /**
     * Pausa la reproduccion de un video
     * @param evt 
     */
    private void pararVideoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pararVideoActionPerformed
        JInternalFrame ventana=escritorio.getAllFrames()[escritorio.getAllFrames().length-1];
        if(ventana.getClass()==VentanaInternaVideo.class){
            ((VentanaInternaVideo)ventana).stop();
        }
    }//GEN-LAST:event_pararVideoActionPerformed

    private void visibilidadGraficosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visibilidadGraficosActionPerformed
        herramientasGraficos.setVisible(true);
        herramientasImagen.setVisible(false);
        herramientasImagen2.setVisible(false);
        herramientaSonido.setVisible(false);
        herramientasVideo.setVisible(false);
    }//GEN-LAST:event_visibilidadGraficosActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        MiDialogo dlg=new MiDialogo(this, true,
                "Programa: Practica Final SMM\n\n " + "Version: 1.0\n " + "Autor: Francisco Beltran Sanchez");
        
        dlg.setLocation((this.getWidth()/2)-dlg.getWidth()/2,
                                 (this.getHeight()/2)-dlg.getHeight()/2);
        dlg.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void activarColorRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activarColorRellenoActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setRellenoColorActivado(true);
            seleccionarColor((Color)ventanaActiva.getLienzo().getColorRelleno(), seleccionColores);
            activarColorTrazo.setSelected(false);
        }
    }//GEN-LAST:event_activarColorRellenoActionPerformed

    private void activarColorTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activarColorTrazoActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setRellenoColorActivado(false);
            seleccionarColor((Color)ventanaActiva.getLienzo().getColorTrazo(), seleccionColores);
            activarColorRelleno.setSelected(false);
        }
    }//GEN-LAST:event_activarColorTrazoActionPerformed

    private void discontinuidadActivadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discontinuidadActivadaActionPerformed
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setDiscontinuidad(!ventanaActiva.getLienzo().isDiscontinuidad());
            propertyChange();
        }
    }//GEN-LAST:event_discontinuidadActivadaActionPerformed

    private void sacarDialogoColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sacarDialogoColorActionPerformed
        //Que se supone que hay que hacer?
    }//GEN-LAST:event_sacarDialogoColorActionPerformed

    private void seleccionColores1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_seleccionColores1ItemStateChanged
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setcolorDegradado1((Color)evt.getItem());
            propertyChange();
        }
    }//GEN-LAST:event_seleccionColores1ItemStateChanged

    private void seleccionColores2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_seleccionColores2ItemStateChanged
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setcolorDegradado2((Color)evt.getItem());
            propertyChange();
        }
    }//GEN-LAST:event_seleccionColores2ItemStateChanged

    private void degradadoVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degradadoVerticalActionPerformed
        degradadoHorizontal.setSelected(false);
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setDegradadoHorizontal(false);
            propertyChange();
        }
    }//GEN-LAST:event_degradadoVerticalActionPerformed

    private void degradadoHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degradadoHorizontalActionPerformed
        degradadoVertical.setSelected(false);
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setDegradadoHorizontal(true);
            propertyChange();
        }
    }//GEN-LAST:event_degradadoHorizontalActionPerformed

    private void modoDegradadoRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoDegradadoRellenoActionPerformed
        modoLisoRelleno.setSelected(false);
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setLiso(false);
            propertyChange();
        }
    }//GEN-LAST:event_modoDegradadoRellenoActionPerformed

    private void modoLisoRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modoLisoRellenoActionPerformed
        modoDegradadoRelleno.setSelected(false);
        if(ventanaActiva!=null){
            ventanaActiva.getLienzo().setLiso(true);
            propertyChange();
        }
    }//GEN-LAST:event_modoLisoRellenoActionPerformed
   
    /**
     * Genera un objeto LookupTable que representa una transformacion aplicando
     * una funcion cuadratica. Tenemos que definir una variable K que represente
     * el valor maximo de la funcion entre 0 y 255, para que al aplicar la 
     * funcion no obtengamos valores que salgan de esos limites. Este maximo
     * se calcula dividiendo 255 entre el valor maximo de la funcion, que sera
     * cuando i=0 si m>=128 o i=255 en caso contrario
     * 
     * En la funcion tenemos dos valores a destacar:
     * 
     * - M, que determina en que valor de i el resultado de aplicar la funcion
     * es 0
     * 
     * - 1/100 (en este caso) que hace que nuestra funcion sea mas o menos 
     * pronunciada. Es decir, si tenemos un valor mayor de esta division, 
     * las diferencias entre un indice y otro de la tabla seran mayores. 
     * @param m
     * @return LookupTable de una funcion de transformacion cuadratica.
     */
    private LookupTable cuadratica(double m){
        double K;
        if(m>=128)
            K=255.0/((1.0/100.0)*Math.pow(0-m,2)); //Cte de normalizacion
        else
            K=255.0/((1.0/100.0)*Math.pow(255-m,2));
        
        byte funcionT[]=new byte[256];
        
        for(int i=0; i<256; i++){
            funcionT[i]=(byte)(K*((1.0/100.0)*Math.pow((i-m),2)));
        }
        
        LookupTable tabla=new ByteLookupTable(0,funcionT);
        
        return tabla;
    }
    
    private void negativo(){
        if(ventanaActiva!=null){
            BufferedImage img=ventanaActiva.getLienzo().getImagenFondo(false);
            if(img!=null){
                try{
                    byte funcionT[]=new byte[256];
                    for(int x=0; x<256; x++){
                        funcionT[x]=(byte)(255-x);
                    }
                    LookupTable tabla=new ByteLookupTable(0,funcionT);
                    LookupOp lop=new LookupOp(tabla,null);
                    lop.filter(img,img);
                    ventanaActiva.repaint();
                }
                catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }
    
    public void propertyChange() {
        if(ventanaActiva!=null){
            if(ventanaActiva.getLienzo().getFormaSeleccionada()!=null &&
                ventanaActiva.getLienzo().isEditar()){
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setColorTrazo(
                        ventanaActiva.getLienzo().getColorTrazo());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setColorRelleno(
                        ventanaActiva.getLienzo().getColorRelleno());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setAlisado(
                        ventanaActiva.getLienzo().isAlisado());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setRelleno(
                        ventanaActiva.getLienzo().isRelleno());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setTransparencia(
                        ventanaActiva.getLienzo().isTransparencia());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setTrazo(
                        ventanaActiva.getLienzo().getGrosor());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setDiscontinuidad(
                        ventanaActiva.getLienzo().isDiscontinuidad());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setLiso(
                        ventanaActiva.getLienzo().isLiso());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setColor1(
                        (Color)ventanaActiva.getLienzo().getcolorDegradado1());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setColor2(
                        (Color)ventanaActiva.getLienzo().getcolorDegradado2());
                
                ventanaActiva.getLienzo().getFormaSeleccionada().setDegradadoHorizontal(
                        ventanaActiva.getLienzo().isDegradadoHorizontal());
                
                ventanaActiva.getLienzo().repaint();
            }
        }
    }
    
    /**
     * Clase manejadora de eventos del lienzo en MarcoPrincipal. Con este 
     * manejador, controlaremos cual es la ventana interna activa en cada 
     * momento de la ejecución, estableciendo los cambios necesarios cuando la
     * ventana interna activada pase a ser otra distinta.
     */
    public class MiManejador extends InternalFrameAdapter{
        
        @Override
        public void internalFrameActivated(InternalFrameEvent evt){
            ventanaActiva=(MarcoSecundario)evt.getInternalFrame();
            
            cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());
            
            cambiarEstadoPropiedades(ventanaActiva.getLienzo().isEditar(),
                                     ventanaActiva.getLienzo().isAlisado(),
                                     ventanaActiva.getLienzo().isTransparencia(),
                                     ventanaActiva.getLienzo().isRelleno());
            
            if(ventanaActiva.getLienzo().isRellenoColorActivado()){
                seleccionarColor((Color)ventanaActiva.getLienzo().getColorRelleno(), seleccionColores);
            }
            else{
                seleccionarColor((Color)ventanaActiva.getLienzo().getColorTrazo(), seleccionColores);
            }
            
            if(ventanaActiva.getLienzo().isDiscontinuidad()){
                discontinuidadActivada.setSelected(true);
            }
            else{
                discontinuidadActivada.setSelected(false);
            }
            
            if(ventanaActiva.getLienzo().isLiso()){
                modoLisoRelleno.setSelected(true);
                modoDegradadoRelleno.setSelected(false);
            }
            else{
                modoLisoRelleno.setSelected(false);
                modoDegradadoRelleno.setSelected(true);
            }
            
            seleccionarColor((Color)ventanaActiva.getLienzo().getcolorDegradado1(), seleccionColores1);
            seleccionarColor((Color)ventanaActiva.getLienzo().getcolorDegradado2(), seleccionColores2);
            
            if(ventanaActiva.getLienzo().isDegradadoHorizontal()){
                degradadoHorizontal.setSelected(true);
                degradadoVertical.setSelected(false);
            }
            else{
                degradadoHorizontal.setSelected(false);
                degradadoVertical.setSelected(true);
            }
            
            cambiarValorGrosor(ventanaActiva.getLienzo().getGrosor());
        }
    }
    
    public class LienzoAdapter implements LienzoListener{

        @Override
        public void edicionFigura(LienzoEvent evt) {
            if(ventanaActiva!=null){
                cambiarEstadoHerramientas(ventanaActiva.getLienzo().getHerramienta());

                cambiarEstadoPropiedades(true,
                                         ventanaActiva.getLienzo().getFormaSeleccionada().isAlisado(),
                                         ventanaActiva.getLienzo().getFormaSeleccionada().isTransparencia(),
                                         ventanaActiva.getLienzo().getFormaSeleccionada().isRelleno());

                if(ventanaActiva.getLienzo().isRellenoColorActivado()){
                    seleccionarColor((Color)ventanaActiva.getLienzo().getFormaSeleccionada().getColorRelleno(), 
                            seleccionColores);
                }
                else{
                    seleccionarColor((Color)ventanaActiva.getLienzo().getFormaSeleccionada().getColorTrazo(), 
                            seleccionColores);
                }

                if(ventanaActiva.getLienzo().getFormaSeleccionada().isDiscontinuidad()){
                    discontinuidadActivada.setSelected(true);
                }
                else{
                    discontinuidadActivada.setSelected(false);
                }
                
                if(ventanaActiva.getLienzo().getFormaSeleccionada().isLiso()){
                    modoLisoRelleno.setSelected(true);
                    modoDegradadoRelleno.setSelected(false);
                }
                else{
                    modoLisoRelleno.setSelected(false);
                    modoDegradadoRelleno.setSelected(true);
                }

                seleccionarColor((Color)ventanaActiva.getLienzo().getFormaSeleccionada().getColor1(), seleccionColores1);
                seleccionarColor((Color)ventanaActiva.getLienzo().getFormaSeleccionada().getColor2(), seleccionColores2);

                if(ventanaActiva.getLienzo().getFormaSeleccionada().isDegradadoHorizontal()){
                    degradadoHorizontal.setSelected(true);
                    degradadoVertical.setSelected(false);
                }
                else{
                    degradadoHorizontal.setSelected(false);
                    degradadoVertical.setSelected(true);
                }
                
                cambiarValorGrosor(ventanaActiva.getLienzo().getFormaSeleccionada().getTrazo()); 
            }
        }
    }
    
    /**
     * Manejador de eventos de audio. Un objeto de tipo Clip puede tener asociado
     * un manejador de eventos para que, cuando se produzca algun hecho 
     * significativo, se realicen unas acciones predefinidas y asociadas a 
     * dicho evento. Los tipos de eventos que se contemplan son los 
     * correspondientes a LineEvent.Type, que son START, STOP y CLOSE.
     * 
     * Este manejador se creara y asociara al objeto player en el momento de 
     * reproducirse una nueva pista de audio.
     */
    public class ManejadorAudio implements LineListener{

        @Override
        public void update(LineEvent le) {
            
            /**
             * Para evitar que el boton de inicio pueda provocar
             * que se reproduzca de nuevo un sonido cuando ya se esta realizando
             * esta accion, se deshabilita el boton.
             */
            if(le.getType()==LineEvent.Type.START){
                botonReproducirAudio.setEnabled(false);
                botonDetenerAudio.setEnabled(true);
            }
            if(le.getType()==LineEvent.Type.STOP){
                botonReproducirAudio.setEnabled(true);
                botonDetenerAudio.setEnabled(false);
            }
            if(le.getType()==LineEvent.Type.CLOSE){

            }
        }
    
    }
    
    /**
     * Manejador de video. Establecemos que cuando se este reproduciendo un 
     * video, se deshabilite el boton de reproducir; y cuando este parado lo
     * mismo para el boton de parar.
     */
    private class VideoListener extends MediaPlayerEventAdapter{
        
        @Override
        public void playing(MediaPlayer mediaPlayer){
            pararVideo.setEnabled(true);
            reproducirVideo.setEnabled(false);
        }
        
        @Override
        public void paused(MediaPlayer mediaPlayer){
            pararVideo.setEnabled(false);
            reproducirVideo.setEnabled(true);
        }
        
        @Override
        public void finished(MediaPlayer mediaPlayer){
            this.paused(mediaPlayer);
        }
    }
    
    /**
     * Método para cambiar el estado de los botones correspondientes a
     * una herramienta. Además, mostrará un mensaje en la barra de estado 
     * notificando dicho cambio.
     * @param h. Herramienta la cual queremos que su botón correspondiente sea
     * seleccionado.
     */
    
    public void cambiarEstadoHerramientas(Herramientas h){
        switch(h){
            case Punto:
                modoLinea.setSelected(false);
                modoRectangulo.setSelected(false);
                modoElipse.setSelected(false);
                modoPunto.setSelected(true);

                barraEstado.setText("Modo punto");
            break;

            case Linea:

                modoPunto.setSelected(false);
                modoRectangulo.setSelected(false);
                modoElipse.setSelected(false);
                modoLinea.setSelected(true);

                barraEstado.setText("Modo línea");

            break;

            case Cuadrado:

                modoPunto.setSelected(false);
                modoLinea.setSelected(false);
                modoElipse.setSelected(false);
                modoRectangulo.setSelected(true);

                barraEstado.setText("Modo rectángulo");

            break;

            case Ovalo:
                modoPunto.setSelected(false);
                modoLinea.setSelected(false);
                modoRectangulo.setSelected(false);
                modoElipse.setSelected(true);

                barraEstado.setText("Modo elipse");
            break;
        }
    }
    
    /**
     * Método para establecer el estado de los botones correspondientes a las 
     * propiedades de las figuras dibujadas en un lienzo.
     * @param e. Modo Editar activado/desactivado.
     * @param a. Modo Alisar activado/desactivado.
     * @param t. Modo Transparencia activado/desactivado.
     * @param r. Modo Relleno activado/desactivado. 
     */
    public void cambiarEstadoPropiedades(boolean e, boolean a, boolean t, boolean r){
        modoRelleno.setSelected(r);
        modoAlisar.setSelected(a);
        modoTransparencia.setSelected(t);
        modoEditar.setSelected(e);
        
    }

    /**
     * Método para establecer, dentro del combobox de selección de color, una de
     * las opciones dentro de esta.
     * @param c. Color a seleccionar en la lista de colores.
     */
    public void seleccionarColor(Color c, JComboBox<Color> seleccionColores){
        seleccionColores.setSelectedItem((Color)c);
    }
    
    /**
     * Método para establecer en el selector de grosor, un valor i enviado como
     * parámetro.
     * @param i. Valor de grosor a establecer.
     */
    public void cambiarValorGrosor(int i){
        selectorGrosor.setValue(i);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton activarColorRelleno;
    private javax.swing.JToggleButton activarColorTrazo;
    private javax.swing.JButton aumentarEscala;
    private javax.swing.JLabel barraEstado;
    private javax.swing.JPanel barraInferior;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JPanel barraSuperior;
    private javax.swing.JButton botonAbrir;
    private javax.swing.JButton botonColor;
    private javax.swing.JButton botonCombinar;
    private javax.swing.JButton botonContraste;
    private javax.swing.JButton botonContrasteIluminado;
    private javax.swing.JButton botonContrasteOscurecido;
    private javax.swing.JButton botonCuadratica;
    private javax.swing.JButton botonDetenerAudio;
    private javax.swing.JButton botonEqualizar;
    private javax.swing.JButton botonFiltroRojo;
    private javax.swing.JButton botonGrabarAudio;
    private javax.swing.JButton botonGuardar;
    private javax.swing.JButton botonNegativo;
    private javax.swing.JButton botonNuevo;
    private javax.swing.JButton botonReproducirAudio;
    private javax.swing.JButton botonSepia;
    private javax.swing.JButton botonTintado;
    private javax.swing.JPanel botonesColor;
    private javax.swing.JPanel botonesContraste;
    private javax.swing.JButton capturas;
    private javax.swing.JComboBox comboBoxEspaciosColor;
    private javax.swing.JComboBox comboFiltro;
    private javax.swing.JRadioButton degradadoHorizontal;
    private javax.swing.JRadioButton degradadoVertical;
    private javax.swing.JToggleButton discontinuidadActivada;
    private javax.swing.JButton disminuirEscala;
    private javax.swing.JButton duplicado;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JToolBar herramientaSonido;
    private javax.swing.JToolBar herramientasGraficos;
    private javax.swing.JToolBar herramientasImagen;
    private javax.swing.JToolBar herramientasImagen2;
    private javax.swing.JToolBar herramientasVideo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JToolBar.Separator jSeparator13;
    private javax.swing.JToolBar.Separator jSeparator14;
    private javax.swing.JToolBar.Separator jSeparator15;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelColor;
    private javax.swing.JComboBox<File> listaReproduccionAudio;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuEdicion;
    private javax.swing.JToggleButton modoAlisar;
    private javax.swing.JToggleButton modoDegradadoRelleno;
    private javax.swing.JToggleButton modoEditar;
    private javax.swing.JToggleButton modoElipse;
    private javax.swing.JToggleButton modoLinea;
    private javax.swing.JToggleButton modoLisoRelleno;
    private javax.swing.JToggleButton modoPunto;
    private javax.swing.JToggleButton modoRectangulo;
    private javax.swing.JToggleButton modoRelleno;
    private javax.swing.JToggleButton modoTransparencia;
    private javax.swing.JMenuItem opcionAbrir;
    private javax.swing.JMenuItem opcionGuardar;
    private javax.swing.JMenuItem opcionNuevo;
    private javax.swing.JPanel panelBrillo;
    private javax.swing.JPanel panelColor;
    private javax.swing.JPanel panelContraste;
    private javax.swing.JPanel panelCuadratico;
    private javax.swing.JPanel panelEscala;
    private javax.swing.JPanel panelFiltro;
    private javax.swing.JPanel panelOtros;
    private javax.swing.JPanel panelRotacion;
    private javax.swing.JButton pararVideo;
    private javax.swing.JButton reproducirVideo;
    private javax.swing.JButton rotacion180;
    private javax.swing.JButton rotacion270;
    private javax.swing.JButton rotacion90;
    private javax.swing.JButton sacarDialogoColor;
    private javax.swing.JComboBox<Color> seleccionColores;
    private javax.swing.JComboBox<Color> seleccionColores1;
    private javax.swing.JComboBox<Color> seleccionColores2;
    private javax.swing.JSpinner selectorGrosor;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderM;
    private javax.swing.JSlider sliderPosterizar;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JLabel tiempoAudio;
    private javax.swing.JMenuItem visibilidadBarraEstado;
    private javax.swing.JMenuItem visibilidadGraficos;
    private javax.swing.JMenuItem visibilidadImagen;
    private javax.swing.JMenuItem visibilidadSonido;
    private javax.swing.JMenuItem visibilidadVideo;
    private javax.swing.JButton webcam;
    // End of variables declaration//GEN-END:variables
}
