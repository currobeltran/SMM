package practica8;

import Paint2D.*;
import Paint2D.Herramientas;
import Paint2D.MiElipse2D;
import Paint2D.MiLinea2D;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

/**
 *
 * @author Francisco Beltrán Sánchez
 */
public class Lienzo extends javax.swing.JPanel {
    
    //Atributos de la clase
    private Herramientas herramienta=Herramientas.Punto;
    private ArrayList<Shape> formas=new ArrayList();
    private Point2D p1;
    private int grosor=1;
    private Paint color=Color.BLACK;
    private boolean relleno=false;
    private boolean editar=false;
    private boolean transparencia=false;
    private boolean alisado=false;
    private Shape formaSeleccionada=null;
    private BufferedImage imagenFondo;
    
    //Getters y setters de los atributos de la clase
    
    public void setHerramienta(Herramientas herramienta) {
        this.herramienta = herramienta;
    }

    public Herramientas getHerramienta() {
        return herramienta;
    }

    public void setGrosor(int grosor) {
        this.grosor = grosor;
        this.repaint();
    }

    public int getGrosor() {
        return grosor;
    }
    
    public void setColor(Paint color) {
        this.color = color;
        this.repaint();
    }

    public Paint getColor() {
        return color;
    }
    
    public void setRelleno(boolean relleno) {
        this.relleno = relleno;
        this.repaint();
    }

    public boolean isRelleno() {
        return relleno;
    }

    public void setEditar(boolean editar) {
        this.editar = editar;
    }
    
    public boolean isEditar(){
        return editar;
    }

    public void setTransparencia(boolean transparencia) {
        this.transparencia = transparencia;
        this.repaint();
    }

    public boolean isTransparencia() {
        return transparencia;
    }
    
    public void setAlisado(boolean alisado) {
        this.alisado = alisado;
        this.repaint();
    }

    public boolean isAlisado() {
        return alisado;
    }

    public BufferedImage getImagenFondo(boolean drawVector) {
        if(drawVector){
            BufferedImage imgout=new BufferedImage(imagenFondo.getWidth(),
                                                   imagenFondo.getHeight(),
                                                   imagenFondo.getType());
            
            boolean opacoActual=this.isOpaque();
            if(imagenFondo.getColorModel().hasAlpha()){
                this.setOpaque(false);
            }
            
            this.paint(imgout.createGraphics());
            this.setOpaque(opacoActual);
            return(imgout);
        }
        
        else
            return imagenFondo;
    }

    public void setImagenFondo(BufferedImage imagenFondo) {
        this.imagenFondo = imagenFondo;
        if(imagenFondo!=null){
            setPreferredSize(new Dimension(imagenFondo.getWidth(),imagenFondo.getHeight()));
        }
    }

    /**
     * Creates new form Lienzo
     */
    public Lienzo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Al presionar con el raton en el lienzo, dependiendo del modo, pueden 
     * ocurrir dos cosas:
     *      - Se crea una nueva figura si no estamos en modo editar dependiendo
     *      de cual sea la herramienta seleccionada
     *      - Se selecciona la figura que este situada en el punto donde se haya
     *      generado el evento
     * @param evt 
     */
    
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if(!editar)
            createShape(evt);
        else
            formaSeleccionada=setSelectedShape(evt.getPoint());
        this.repaint();    
    }//GEN-LAST:event_formMousePressed

    /**
     * En los dos eventos siguientes, se llama a la misma funcion, la cual se 
     * encarga de actualizar una figura ya creada. Dependiendo del modo, pueden
     * ocurrir dos cosas:
     *      - Si el modo editar esta activado, la figura seleccionada se 
     *      desplazará al lugar donde llevemos el raton.
     *      - En cambio, si este modo está desactivado, la figura que se creó 
     *      anteriormente al presionar cambiará de forma dependiendo del tipo 
     *      que sea.
     * @param evt 
     */
    
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        updateShape(evt);
        this.repaint();
    }//GEN-LAST:event_formMouseDragged

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        updateShape(evt);
        this.repaint();
    }//GEN-LAST:event_formMouseReleased

    private void createShape(java.awt.event.MouseEvent evt){
        p1=evt.getPoint();
        
        switch(herramienta){
            case Punto:
                formas.add(new MiLinea2D(evt.getPoint(), evt.getPoint()));
            break;

            case Linea:
                formas.add(new MiLinea2D(evt.getPoint(), evt.getPoint()));
            break;

            case Cuadrado:
                formas.add(new Rectangle(evt.getX(), evt.getY(), 0, 0));
            break;

            case Ovalo:
                formas.add(new MiElipse2D(evt.getPoint(), 0, 0));
            break;
        }
        
    }
    
    private void updateShape(java.awt.event.MouseEvent evt){
        Shape s;
        
        if(editar){
            if(formaSeleccionada!=null)
                setLocation(formaSeleccionada, evt.getPoint());
        }
        
        else{
            s=formas.get(formas.size()-1);
        
            if(s instanceof MiLinea2D && herramienta!=Herramientas.Punto){
                ((MiLinea2D)s).setLine(p1,evt.getPoint());
            }     

            else if(s instanceof Rectangle){
                ((Rectangle)s).setFrameFromDiagonal(p1,evt.getPoint());
            }

            else if(s instanceof MiElipse2D){
                ((MiElipse2D)s).setFrameFromDiagonal(p1, evt.getPoint());
            }
        }
    }
    
    /**
     * Método que revisa si alguna figura del vector de formas del lienzo 
     * contiene el Point2D enviado como argumento.
     * @param p. Punto que debe contener la figura a seleccionar.
     * @return Shape s que contenga el punto, si no existen coincidencias 
     * devuelve null
     */
    
    private Shape setSelectedShape(Point2D p){
        for (Shape s : formas){
            if(s.contains(p)){
                return s;
            }
        }
        return null;
    }
    
    /**
     * Método para cambiar la posicion de una forma a un punto enviado como 
     * parámetro. 
     * @param s. Forma a la cual queremos cambiarle la posición. Al ser un 
     * argumento de tipo Shape, dentro del método tenemos que averiguar su tipo 
     * específico para aplicar el método setLocation específico de la clase a la
     * que pertenece.
     * @param pos. Punto donde queremos desplazar la forma s.
     */
    
    private void setLocation(Shape s, Point2D pos){
        if(s instanceof MiLinea2D){
            ((MiLinea2D)s).setLocation(pos);
        }
        else if(s instanceof Rectangle){
            ((Rectangle)s).setLocation((Point)pos);
        }
        else if(s instanceof MiElipse2D){
            ((MiElipse2D)s).setLocation(pos);
        }
    }
    
    
    
    /**
     * Método que pinta los elementos que contenga el vector de formas
     * de la clase.
     * @param g 
     */
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d=(Graphics2D)g; 
        
        if(imagenFondo!=null){
            g2d.drawImage(imagenFondo, 0, 0, this);
        }
        
        if(transparencia){
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
        }
        else{            
            g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1f));
        }
        
        if(alisado){
            g2d.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON));
        }
        else{
            g2d.setRenderingHints(new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF));
        }
        
        g2d.setPaint(color);
        
        g2d.setStroke(new BasicStroke(grosor));
         
        for(Shape s : formas){
            if(relleno)
                g2d.fill(s);
            
            g2d.draw(s);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
